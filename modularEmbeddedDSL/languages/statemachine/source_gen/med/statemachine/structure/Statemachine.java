package med.statemachine.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IHasIdentifierName;
import med.core.structure.IModuleContent;
import med.core.structure.IDocumentable;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Statemachine extends MedBase implements IHasIdentifierName, IModuleContent, IDocumentable {
  public static final String concept = "med.statemachine.structure.Statemachine";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TEXT = "text";
  public static final String STATES = "states";
  public static final String EVENTS = "events";

  public Statemachine(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Statemachine.NAME);
  }

  public void setName(String value) {
    this.setProperty(Statemachine.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Statemachine.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Statemachine.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Statemachine.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Statemachine.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Statemachine.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Statemachine.VIRTUAL_PACKAGE, value);
  }

  public String getText() {
    return this.getProperty(Statemachine.TEXT);
  }

  public void setText(String value) {
    this.setProperty(Statemachine.TEXT, value);
  }

  public int getStatesesCount() {
    return this.getChildCount(Statemachine.STATES);
  }

  public Iterator<State> stateses() {
    return this.children(State.class, Statemachine.STATES);
  }

  public List<State> getStateses() {
    return this.getChildren(State.class, Statemachine.STATES);
  }

  public void addStates(State node) {
    this.addChild(Statemachine.STATES, node);
  }

  public void insertStates(State prev, State node) {
    this.insertChild(prev, Statemachine.STATES, node);
  }

  public int getEventsesCount() {
    return this.getChildCount(Statemachine.EVENTS);
  }

  public Iterator<Event> eventses() {
    return this.children(Event.class, Statemachine.EVENTS);
  }

  public List<Event> getEventses() {
    return this.getChildren(Event.class, Statemachine.EVENTS);
  }

  public void addEvents(Event node) {
    this.addChild(Statemachine.EVENTS, node);
  }

  public void insertEvents(Event prev, Event node) {
    this.insertChild(prev, Statemachine.EVENTS, node);
  }

  public static Statemachine newInstance(SModel sm, boolean init) {
    return (Statemachine)SModelUtil_new.instantiateConceptDeclaration("med.statemachine.structure.Statemachine", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Statemachine newInstance(SModel sm) {
    return Statemachine.newInstance(sm, false);
  }
}
