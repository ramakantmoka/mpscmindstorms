package med.dataflowblocks.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import med.core.behavior.Type_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typecheckForPorts_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public typecheckForPorts_NonTypesystemRule() {
  }

  public void applyRule(final SNode port, final TypeCheckingContext typeCheckingContext) {
    boolean anError = true;
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(port, "target", true), "med.dataflowblocks.structure.Block")) {
      for (SNode inport : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(port, "target", true), "med.dataflowblocks.structure.Block"), "porttype", false), "inports", true))) {
        if (SLinkOperations.getTarget(inport, "type", true) == SLinkOperations.getTarget(port, "porttype", false)) {
          anError = false;
        }
      }
      if (anError) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(port, "no inport of type " + Type_Behavior.call_typename_5223430962849766361(SLinkOperations.getTarget(SLinkOperations.getTarget(port, "porttype", false), "type", true)) + " found in target " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(port, "target", true), "med.dataflowblocks.structure.Block"), "porttype", false), "name"), "r:aa7dbd35-4c4a-4916-a7ca-d4a2b8dcbf31(med.dataflowblocks.typesystem)", "5223430962849328629", intentionProvider, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "med.dataflowblocks.structure.Port";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
