package med.components.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IReturnable;
import jetbrains.mps.smodel.SNode;
import med.core.structure.StatementList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InterfaceProcedureImplementation extends MedBase implements IReturnable, IComponentImplContent {
  public static final String concept = "med.components.structure.InterfaceProcedureImplementation";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PROCEDURE = "procedure";
  public static final String BODY = "body";

  public InterfaceProcedureImplementation(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(InterfaceProcedureImplementation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(InterfaceProcedureImplementation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(InterfaceProcedureImplementation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(InterfaceProcedureImplementation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(InterfaceProcedureImplementation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(InterfaceProcedureImplementation.VIRTUAL_PACKAGE, value);
  }

  public InterfaceProcedure getProcedure() {
    return (InterfaceProcedure) this.getReferent(InterfaceProcedure.class, InterfaceProcedureImplementation.PROCEDURE);
  }

  public void setProcedure(InterfaceProcedure node) {
    super.setReferent(InterfaceProcedureImplementation.PROCEDURE, node);
  }

  public StatementList getBody() {
    return (StatementList) this.getChild(StatementList.class, InterfaceProcedureImplementation.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(InterfaceProcedureImplementation.BODY, node);
  }

  public static InterfaceProcedureImplementation newInstance(SModel sm, boolean init) {
    return (InterfaceProcedureImplementation) SModelUtil_new.instantiateConceptDeclaration("med.components.structure.InterfaceProcedureImplementation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InterfaceProcedureImplementation newInstance(SModel sm) {
    return InterfaceProcedureImplementation.newInstance(sm, false);
  }
}
