package med.components.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IModuleContent;
import med.core.structure.IHasIdentifierName;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PortAdaptor extends MedBase implements IModuleContent, IHasIdentifierName {
  public static final String concept = "med.components.structure.PortAdaptor";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String INTERFACE = "interface";
  public static final String DESCRIPTOR = "descriptor";

  public PortAdaptor(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(PortAdaptor.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(PortAdaptor.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(PortAdaptor.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(PortAdaptor.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(PortAdaptor.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(PortAdaptor.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(PortAdaptor.NAME);
  }

  public void setName(String value) {
    this.setProperty(PortAdaptor.NAME, value);
  }

  public Interface getInterface() {
    return (Interface) this.getReferent(Interface.class, PortAdaptor.INTERFACE);
  }

  public void setInterface(Interface node) {
    super.setReferent(PortAdaptor.INTERFACE, node);
  }

  public ComponentDescriptor getDescriptor() {
    return (ComponentDescriptor) this.getChild(ComponentDescriptor.class, PortAdaptor.DESCRIPTOR);
  }

  public void setDescriptor(ComponentDescriptor node) {
    super.setChild(PortAdaptor.DESCRIPTOR, node);
  }

  public static PortAdaptor newInstance(SModel sm, boolean init) {
    return (PortAdaptor) SModelUtil_new.instantiateConceptDeclaration("med.components.structure.PortAdaptor", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PortAdaptor newInstance(SModel sm) {
    return PortAdaptor.newInstance(sm, false);
  }
}
