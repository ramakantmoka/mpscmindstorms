package med.components.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class ComponentImplementation_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_updateProcedures_2739617086187249561(SNode thisNode, SNode component) {
    for (final SNode op : Sequence.fromIterable(ComponentImplementation_Behavior.call_allProceduresThatNeedImplementation_1265321504643777738(thisNode))) {
      if (Sequence.fromIterable(ComponentImplementation_Behavior.call_procedureImplementations_1265321504639707378(thisNode)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "procedure", false) == op;
        }
      }).isEmpty()) {
        SNode impl = SConceptOperations.createNewNode("med.components.structure.InterfaceProcedureImplementation", null);
        SLinkOperations.setTarget(impl, "procedure", op, false);
        SLinkOperations.addChild(thisNode, "contents", impl);
      }
    }
  }

  public static Iterable<SNode> call_allProceduresThatNeedImplementation_1265321504643777738(final SNode thisNode) {
    return ListSequence.fromList(Component_Behavior.call_allProcedures_2739617086186422653(SLinkOperations.getTarget(thisNode, "componentType", false))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(ComponentImplementation_Behavior.call_hasPortForwarderFor_1265321504643777856(thisNode, InterfaceProcedure_Behavior.call_owningInterface_1265321504643777616(it)));
      }
    });
  }

  public static boolean call_hasPortForwarderFor_1265321504643777856(SNode thisNode, final SNode i) {
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "contents", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "med.components.structure.PortForwarder");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(it, "med.components.structure.PortForwarder"), "provided", false), "interface", false) == i;
      }
    }).isNotEmpty();
  }

  public static Iterable<SNode> call_procedureImplementations_1265321504639707378(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "contents", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "med.components.structure.InterfaceProcedureImplementation");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "med.components.structure.InterfaceProcedureImplementation");
      }
    });
  }

  public static SNode call_findMethodImplementation_3113923837077903669(SNode thisNode, final SNode p) {
    return Sequence.fromIterable(ComponentImplementation_Behavior.call_procedureImplementations_1265321504639707378(thisNode)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "procedure", false) == p);
      }
    }).first();
  }
}
