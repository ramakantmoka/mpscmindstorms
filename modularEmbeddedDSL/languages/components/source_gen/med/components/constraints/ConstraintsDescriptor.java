package med.components.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;

public class ConstraintsDescriptor implements IModelConstraints {
  private List<IModelConstraints> myConstraints = ListSequence.fromList(new ArrayList<IModelConstraints>());

  public ConstraintsDescriptor() {
    ListSequence.fromList(this.myConstraints).addElement(new PortForwarder_required_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PortForwarder_provided_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ProceduralPort_interface_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new InterfaceProcedureImplementation_procedure_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ComponentImplementation_componentType_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new InterfaceProcParameterReference_param_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PortAdapterExpression_portAdaptor_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PortProcedureCall_procedure_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PortAdaptor_interface_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new RequiredPortProcedureCall_procedure_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new RequiredPortExpression_port_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ComponentDescriptor_component_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ComponentDescriptor_implementation_ReferentConstraint());
  }

  public void unRegisterSelf(ModelConstraintsManager p0) {
    for (IModelConstraints c : this.myConstraints) {
      c.unRegisterSelf(p0);
    }
  }

  public void registerSelf(ModelConstraintsManager p0) {
    for (IModelConstraints c : this.myConstraints) {
      c.registerSelf(p0);
    }
  }
}
