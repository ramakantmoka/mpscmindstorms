package med.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import med.core.behavior.ExternalModule_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.smodel.SModelUtil_new;

public class noDotHForExternalHeaderFile_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public noDotHForExternalHeaderFile_NonTypesystemRule() {
  }

  public void applyRule(final SNode externalModule, final TypeCheckingContext typeCheckingContext) {
    if (ExternalModule_Behavior.call_representsExternalHeaderFile_7647825645222690352(externalModule)) {
      if (SPropertyOperations.getString(externalModule, "existingHeaderFile").contains(".")) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          typeCheckingContext.reportTypeError(externalModule, "filename should not contain extension.", "r:3d70d4be-a562-4b30-9af0-117d21b87b6e(med.core.typesystem@12_0)", "7647825645224091666", intentionProvider, errorTarget);
        }
      }

    }
  }

  public String getApplicableConceptFQName() {
    return "med.core.structure.ExternalModule";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
