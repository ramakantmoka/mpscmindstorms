package med.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_DereferenceExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_DereferenceExpression_InferenceRule() {
  }

  public void applyRule(final SNode deref, final TypeCheckingContext typeCheckingContext) {
    if (SLinkOperations.getTarget(deref, "expression", true) != null) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(deref, "expression", true);
        BaseIntentionProvider intentionProvider = null;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:2722db94-1dcc-4cd4-9566-13f53f67069f(med.core.typesystem)", "8937796720371741187", 0, intentionProvider);
        _info_12389875345.setInequationGroup("");
        typeCheckingContext.createLessThanInequationStrong((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:2722db94-1dcc-4cd4-9566-13f53f67069f(med.core.typesystem)", "8937796720371741193", true), (SNode) SConceptOperations.createNewNode("med.core.structure.GenericPointerType", null), false, _info_12389875345);
      }
      if (SNodeOperations.isInstanceOf(typeCheckingContext.typeOf(SLinkOperations.getTarget(deref, "expression", true), "r:2722db94-1dcc-4cd4-9566-13f53f67069f(med.core.typesystem)", "8937796720371741202", true), "med.core.structure.PointerType")) {
        {
          SNode _nodeToCheck_1029348928467 = deref;
          BaseIntentionProvider intentionProvider = null;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:2722db94-1dcc-4cd4-9566-13f53f67069f(med.core.typesystem)", "8937796720371363275", 0, intentionProvider);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:2722db94-1dcc-4cd4-9566-13f53f67069f(med.core.typesystem)", "8937796720371363272", true), (SNode) SNodeOperations.copyNode(SLinkOperations.getTarget((SNodeOperations.cast(typeCheckingContext.typeOf(SLinkOperations.getTarget(deref, "expression", true), "r:2722db94-1dcc-4cd4-9566-13f53f67069f(med.core.typesystem)", "8937796720371363292", true), "med.core.structure.PointerType")), "baseType", true)), _info_12389875345);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "med.core.structure.DereferenceExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
