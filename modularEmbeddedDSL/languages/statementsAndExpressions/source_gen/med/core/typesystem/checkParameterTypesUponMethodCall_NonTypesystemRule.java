package med.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkParameterTypesUponMethodCall_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkParameterTypesUponMethodCall_NonTypesystemRule() {
  }

  public void applyRule(final SNode procedureCall, final TypeCheckingContext typeCheckingContext) {
    {
      final SNode _representatorVar0 = procedureCall;
      typeCheckingContext.whenConcrete(_representatorVar0, new Runnable() {
        public void run() {
          SNode procedure = SLinkOperations.getTarget(procedureCall, "procedure", false);
          for (SNode a : ListSequence.fromList(SLinkOperations.getTargets(procedureCall, "actuals", true))) {
            int idx = ListSequence.fromList(SLinkOperations.getTargets(procedureCall, "actuals", true)).indexOf(a);
            SNode p = ListSequence.fromList(SLinkOperations.getTargets(procedure, "parameters", true)).toGenericArray(SNode.class)[idx];
            {
              SNode _nodeToCheck_1029348928467 = a;
              BaseIntentionProvider intentionProvider = null;
              typeCheckingContext.createComparableEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3d70d4be-a562-4b30-9af0-117d21b87b6e(med.core.typesystem@12_0)", "9024796767936657962", true), (SNode)typeCheckingContext.typeOf(p, "r:3d70d4be-a562-4b30-9af0-117d21b87b6e(med.core.typesystem@12_0)", "9024796767936657965", true), _nodeToCheck_1029348928467, null, "r:3d70d4be-a562-4b30-9af0-117d21b87b6e(med.core.typesystem@12_0)", "9024796767936657960", intentionProvider);
            }
          }
        }
      }, "r:3d70d4be-a562-4b30-9af0-117d21b87b6e(med.core.typesystem@12_0)", "2005811434196936593", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "med.core.structure.ProcedureCall";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
