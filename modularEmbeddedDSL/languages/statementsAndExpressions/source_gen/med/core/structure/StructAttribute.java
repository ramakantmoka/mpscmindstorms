package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StructAttribute extends BaseConcept implements IHasIdentifierName, IMedTyped {
  public static final String concept = "med.core.structure.StructAttribute";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TYPE = "type";

  public StructAttribute(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(StructAttribute.NAME);
  }

  public void setName(String value) {
    this.setProperty(StructAttribute.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(StructAttribute.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(StructAttribute.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(StructAttribute.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(StructAttribute.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(StructAttribute.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(StructAttribute.VIRTUAL_PACKAGE, value);
  }

  public Type getType() {
    return (Type)this.getChild(Type.class, StructAttribute.TYPE);
  }

  public void setType(Type node) {
    super.setChild(StructAttribute.TYPE, node);
  }

  public static StructAttribute newInstance(SModel sm, boolean init) {
    return (StructAttribute)SModelUtil_new.instantiateConceptDeclaration("med.core.structure.StructAttribute", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StructAttribute newInstance(SModel sm) {
    return StructAttribute.newInstance(sm, false);
  }
}
