package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ProcedureSignature extends MedBase implements IHasIdentifierName, IExportableModuleContent, IDocumentable {
  public static final String concept = "med.core.structure.ProcedureSignature";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TEXT = "text";
  public static final String DONT_MANGLE_NAME = "dontMangleName";
  public static final String EXPORT = "export";
  public static final String TYPE = "type";
  public static final String PARAMETERS = "parameters";

  public ProcedureSignature(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(ProcedureSignature.NAME);
  }

  public void setName(String value) {
    this.setProperty(ProcedureSignature.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(ProcedureSignature.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ProcedureSignature.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ProcedureSignature.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ProcedureSignature.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ProcedureSignature.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ProcedureSignature.VIRTUAL_PACKAGE, value);
  }

  public String getText() {
    return this.getProperty(ProcedureSignature.TEXT);
  }

  public void setText(String value) {
    this.setProperty(ProcedureSignature.TEXT, value);
  }

  public boolean getDontMangleName() {
    return this.getBooleanProperty(ProcedureSignature.DONT_MANGLE_NAME);
  }

  public void setDontMangleName(boolean value) {
    this.setBooleanProperty(ProcedureSignature.DONT_MANGLE_NAME, value);
  }

  public boolean getExport() {
    return this.getBooleanProperty(ProcedureSignature.EXPORT);
  }

  public void setExport(boolean value) {
    this.setBooleanProperty(ProcedureSignature.EXPORT, value);
  }

  public Type getType() {
    return (Type) this.getChild(Type.class, ProcedureSignature.TYPE);
  }

  public void setType(Type node) {
    super.setChild(ProcedureSignature.TYPE, node);
  }

  public int getParametersesCount() {
    return this.getChildCount(ProcedureSignature.PARAMETERS);
  }

  public Iterator<ProcedureParameter> parameterses() {
    return this.children(ProcedureParameter.class, ProcedureSignature.PARAMETERS);
  }

  public List<ProcedureParameter> getParameterses() {
    return this.getChildren(ProcedureParameter.class, ProcedureSignature.PARAMETERS);
  }

  public void addParameters(ProcedureParameter node) {
    this.addChild(ProcedureSignature.PARAMETERS, node);
  }

  public void insertParameters(ProcedureParameter prev, ProcedureParameter node) {
    this.insertChild(prev, ProcedureSignature.PARAMETERS, node);
  }

  public static ProcedureSignature newInstance(SModel sm, boolean init) {
    return (ProcedureSignature) SModelUtil_new.instantiateConceptDeclaration("med.core.structure.ProcedureSignature", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ProcedureSignature newInstance(SModel sm) {
    return ProcedureSignature.newInstance(sm, false);
  }
}
