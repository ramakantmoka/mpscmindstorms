package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TypeDef extends BaseConcept implements IHasIdentifierName, IExportableModuleContent, IContributesToHeader {
  public static final String concept = "med.core.structure.TypeDef";
  public static final String OPTIONAL_LOW_LEVEL_NAME = "optionalLowLevelName";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXPORT = "export";
  public static final String BASE_TYPE = "baseType";

  public TypeDef(SNode node) {
    super(node);
  }

  public String getOptionalLowLevelName() {
    return this.getProperty(TypeDef.OPTIONAL_LOW_LEVEL_NAME);
  }

  public void setOptionalLowLevelName(String value) {
    this.setProperty(TypeDef.OPTIONAL_LOW_LEVEL_NAME, value);
  }

  public String getName() {
    return this.getProperty(TypeDef.NAME);
  }

  public void setName(String value) {
    this.setProperty(TypeDef.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(TypeDef.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(TypeDef.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(TypeDef.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(TypeDef.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(TypeDef.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(TypeDef.VIRTUAL_PACKAGE, value);
  }

  public boolean getExport() {
    return this.getBooleanProperty(TypeDef.EXPORT);
  }

  public void setExport(boolean value) {
    this.setBooleanProperty(TypeDef.EXPORT, value);
  }

  public Type getBaseType() {
    return (Type) this.getChild(Type.class, TypeDef.BASE_TYPE);
  }

  public void setBaseType(Type node) {
    super.setChild(TypeDef.BASE_TYPE, node);
  }

  public static TypeDef newInstance(SModel sm, boolean init) {
    return (TypeDef) SModelUtil_new.instantiateConceptDeclaration("med.core.structure.TypeDef", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TypeDef newInstance(SModel sm) {
    return TypeDef.newInstance(sm, false);
  }
}
