package med.bitdata.structure;

/*Generated by MPS */

import med.core.structure.Expression;
import med.core.structure.ILValue;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BitAccessExpression extends Expression implements ILValue {
  public static final String concept = "med.bitdata.structure.BitAccessExpression";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String BITS = "bits";
  public static final String EXPRESSION = "expression";

  public BitAccessExpression(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BitAccessExpression.NAME);
  }

  public void setName(String value) {
    this.setProperty(BitAccessExpression.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BitAccessExpression.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BitAccessExpression.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BitAccessExpression.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BitAccessExpression.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BitAccessExpression.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BitAccessExpression.VIRTUAL_PACKAGE, value);
  }

  public BitRange getBits() {
    return (BitRange) this.getReferent(BitRange.class, BitAccessExpression.BITS);
  }

  public void setBits(BitRange node) {
    super.setReferent(BitAccessExpression.BITS, node);
  }

  public Expression getExpression() {
    return (Expression) this.getChild(Expression.class, BitAccessExpression.EXPRESSION);
  }

  public void setExpression(Expression node) {
    super.setChild(BitAccessExpression.EXPRESSION, node);
  }

  public static BitAccessExpression newInstance(SModel sm, boolean init) {
    return (BitAccessExpression) SModelUtil_new.instantiateConceptDeclaration("med.bitdata.structure.BitAccessExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BitAccessExpression newInstance(SModel sm) {
    return BitAccessExpression.newInstance(sm, false);
  }
}
