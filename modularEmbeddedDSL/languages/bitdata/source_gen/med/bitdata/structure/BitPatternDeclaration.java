package med.bitdata.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IExportableModuleContent;
import med.core.structure.IHasIdentifierName;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BitPatternDeclaration extends MedBase implements IExportableModuleContent, IHasIdentifierName {
  public static final String concept = "med.bitdata.structure.BitPatternDeclaration";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String EXPORT = "export";
  public static final String RANGES = "ranges";

  public BitPatternDeclaration(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(BitPatternDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BitPatternDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BitPatternDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BitPatternDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BitPatternDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BitPatternDeclaration.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(BitPatternDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(BitPatternDeclaration.NAME, value);
  }

  public boolean getExport() {
    return this.getBooleanProperty(BitPatternDeclaration.EXPORT);
  }

  public void setExport(boolean value) {
    this.setBooleanProperty(BitPatternDeclaration.EXPORT, value);
  }

  public int getRangesesCount() {
    return this.getChildCount(BitPatternDeclaration.RANGES);
  }

  public Iterator<BitRange> rangeses() {
    return this.children(BitRange.class, BitPatternDeclaration.RANGES);
  }

  public List<BitRange> getRangeses() {
    return this.getChildren(BitRange.class, BitPatternDeclaration.RANGES);
  }

  public void addRanges(BitRange node) {
    this.addChild(BitPatternDeclaration.RANGES, node);
  }

  public void insertRanges(BitRange prev, BitRange node) {
    this.insertChild(prev, BitPatternDeclaration.RANGES, node);
  }

  public static BitPatternDeclaration newInstance(SModel sm, boolean init) {
    return (BitPatternDeclaration) SModelUtil_new.instantiateConceptDeclaration("med.bitdata.structure.BitPatternDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BitPatternDeclaration newInstance(SModel sm) {
    return BitPatternDeclaration.newInstance(sm, false);
  }
}
