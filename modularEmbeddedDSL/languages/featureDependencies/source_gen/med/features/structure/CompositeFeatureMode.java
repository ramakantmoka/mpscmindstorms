package med.features.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum CompositeFeatureMode {
  mandatory("mandatory", "mandatory"),
  optional("optional", "optional"),
  or("or", "or"),
  xor("xor", "xor");

  private String myName;
  private String myValue;

  CompositeFeatureMode(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public String getValue() {
    return this.myValue;
  }

  public static List<CompositeFeatureMode> getConstants() {
    List<CompositeFeatureMode> list = ListSequence.fromList(new LinkedList<CompositeFeatureMode>());
    ListSequence.fromList(list).addElement(CompositeFeatureMode.mandatory);
    ListSequence.fromList(list).addElement(CompositeFeatureMode.optional);
    ListSequence.fromList(list).addElement(CompositeFeatureMode.or);
    ListSequence.fromList(list).addElement(CompositeFeatureMode.xor);
    return list;
  }

  public static CompositeFeatureMode getDefault() {
    return CompositeFeatureMode.optional;
  }

  public static CompositeFeatureMode parseValue(String value) {
    if (value == null) {
      return CompositeFeatureMode.getDefault();
    }
    if (value.equals(CompositeFeatureMode.mandatory.getValueAsString())) {
      return CompositeFeatureMode.mandatory;
    }
    if (value.equals(CompositeFeatureMode.optional.getValueAsString())) {
      return CompositeFeatureMode.optional;
    }
    if (value.equals(CompositeFeatureMode.or.getValueAsString())) {
      return CompositeFeatureMode.or;
    }
    if (value.equals(CompositeFeatureMode.xor.getValueAsString())) {
      return CompositeFeatureMode.xor;
    }
    return CompositeFeatureMode.getDefault();
  }
}
