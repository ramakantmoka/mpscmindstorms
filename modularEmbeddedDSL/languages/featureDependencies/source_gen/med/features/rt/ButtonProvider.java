package med.features.rt;

/*Generated by MPS */

import javax.swing.JButton;
import jetbrains.mps.smodel.SNode;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class ButtonProvider {
  public ButtonProvider() {
  }

  public static JButton swapButton(final SNode config) {
    JButton swapButton = new JButton();
    swapButton.setText("<-->");
    swapButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        final Wrappers._T<SNode> oldMode = new Wrappers._T<SNode>(null);
        final Wrappers._T<SNode> oldBackup = new Wrappers._T<SNode>(null);
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            oldMode.value = SLinkOperations.getTarget(config, "mode", true);
            oldBackup.value = SLinkOperations.getTarget(config, "backup", true);
          }
        });
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            SLinkOperations.setTarget(config, "mode", SNodeOperations.copyNode(oldBackup.value), true);
            SLinkOperations.setTarget(config, "backup", SNodeOperations.copyNode(oldMode.value), true);
          }
        });
      }
    });
    return swapButton;
  }

  public static JButton checkModelButton(final SNode config) {
    JButton checkButton = new JButton();
    checkButton.setText("Check Model");
    checkButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        ValidationBaseBuilder.clearProblems();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            for (SNode r : ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(config), null))) {
              if (SNodeOperations.isInstanceOf(r, "med.features.structure.FeatureDependencyConfiguration")) {
                continue;
              }
              FeatureDependencyChecker.checkModel(r);
            }
          }
        });
      }
    });
    return checkButton;
  }
}
