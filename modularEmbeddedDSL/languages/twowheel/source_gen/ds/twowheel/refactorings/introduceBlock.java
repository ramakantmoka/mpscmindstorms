package ds.twowheel.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.refactoring.framework.paramchooser.mps.MPSChooserFactory;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class introduceBlock extends BaseRefactoring {
  public introduceBlock() {
    this.addTransientParameter("blockName");
  }

  public String getUserFriendlyName() {
    return "Introduce Block";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new introduceBlock_Target();
  }

  public boolean init(final RefactoringContext refactoringContext) {
    return introduceBlock.this.ask(refactoringContext, MPSChooserFactory.createStringChooser(refactoringContext, "blockName", new introduceBlock_blockName_Settings(refactoringContext)));
  }

  public void refactor(final RefactoringContext refactoringContext) {
    SNode newblock = SConceptOperations.createNewNode("ds.twowheel.structure.BlockStatement", null);
    SPropertyOperations.set(newblock, "name", ((String) refactoringContext.getParameter("blockName")));
    SNodeOperations.replaceWithAnother(ListSequence.fromList(refactoringContext.getSelectedNodes()).first(), newblock);
    SLinkOperations.addAll(newblock, "statements", refactoringContext.getSelectedNodes());
  }

  public static String getKeyStroke_static() {
    return "alt shift B";
  }
}
