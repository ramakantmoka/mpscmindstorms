package med.requirements.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DummyRequirement extends BaseConcept {
  public static final String concept = "med.requirements.structure.DummyRequirement";
  public static final String NAME = "name";
  public static final String TEXT = "text";
  public static final String DEPENDENCIES = "dependencies";

  public DummyRequirement(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(DummyRequirement.NAME);
  }

  public void setName(String value) {
    this.setProperty(DummyRequirement.NAME, value);
  }

  public String getText() {
    return this.getProperty(DummyRequirement.TEXT);
  }

  public void setText(String value) {
    this.setProperty(DummyRequirement.TEXT, value);
  }

  public int getDependenciesesCount() {
    return this.getChildCount(DummyRequirement.DEPENDENCIES);
  }

  public Iterator<DummyDependency> dependencieses() {
    return this.children(DummyDependency.class, DummyRequirement.DEPENDENCIES);
  }

  public List<DummyDependency> getDependencieses() {
    return this.getChildren(DummyDependency.class, DummyRequirement.DEPENDENCIES);
  }

  public void addDependencies(DummyDependency node) {
    this.addChild(DummyRequirement.DEPENDENCIES, node);
  }

  public void insertDependencies(DummyDependency prev, DummyDependency node) {
    this.insertChild(prev, DummyRequirement.DEPENDENCIES, node);
  }

  public static DummyRequirement newInstance(SModel sm, boolean init) {
    return (DummyRequirement)SModelUtil_new.instantiateConceptDeclaration("med.requirements.structure.DummyRequirement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DummyRequirement newInstance(SModel sm) {
    return DummyRequirement.newInstance(sm, false);
  }
}
