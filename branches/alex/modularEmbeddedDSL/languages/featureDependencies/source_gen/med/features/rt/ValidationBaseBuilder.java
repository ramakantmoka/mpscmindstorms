package med.features.rt;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import med.features.behavior.BaseFE_Behavior;
import jetbrains.mps.smodel.ModelAccess;

public class ValidationBaseBuilder {
  private static List<List<SNode>> configurations = new ArrayList<List<SNode>>();
  private static SNode featureDepConfig = null;

  public static void buildValidFeatureList(SNode config) {
    clearProblems();
    featureDepConfig = config;
    configurations = new ArrayList<List<SNode>>();
    List<SNode> all = ListSequence.fromList(SLinkOperations.getTargets(config, "features", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "med.features.structure.SimpleFeatureDeclaration");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "med.features.structure.SimpleFeatureDeclaration");
      }
    }).toListSequence();
    List<SNode> empty = new ArrayList<SNode>();
    configurations.add(empty);
    recurse(all, empty, 0);
  }

  public static void recurse(List<SNode> all, List<SNode> selected, int index) {
    if (index == ListSequence.fromList(all).count()) {
      return;
    }
    recurse(all, selected, index + 1);
    List<SNode> withMe = cloneWith(selected, ListSequence.fromList(all).getElement(index));
    configurations.add(withMe);
    recurse(all, withMe, index + 1);
  }

  public static List<SNode> cloneWith(List<SNode> base, SNode f) {
    List<SNode> l = new ArrayList<SNode>();
    ListSequence.fromList(l).addSequence(ListSequence.fromList(base));
    ListSequence.fromList(l).addElement(f);
    return l;
  }

  public static List<List<SNode>> applicableConfigurations(SNode clause) {
    if (configurations.isEmpty()) {
      buildValidFeatureList(ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(clause), "med.features.structure.FeatureDependencyConfiguration")).first());
    }
    List<List<SNode>> res = new ArrayList<List<SNode>>();
    for (List<SNode> c : ListSequence.fromList(configurations)) {
      if (BaseFE_Behavior.call_isTrue_1833385247967456436(SLinkOperations.getTarget(clause, "expression", true), c)) {
        res.add(c);
      }
    }
    return res;
  }

  public static void clearProblems() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SLinkOperations.removeAllChildren(featureDepConfig, "problems");
      }
    });
  }

  public static void reportProblem(final SNode p) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SLinkOperations.addChild(featureDepConfig, "problems", p);
      }
    });
  }
}
