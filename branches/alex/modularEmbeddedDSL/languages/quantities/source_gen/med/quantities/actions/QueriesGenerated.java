package med.quantities.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;

public class QueriesGenerated {
  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_ModuleVariableRef_738757997636264937(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.getAncestor(_context.getSourceNode(), "med.core.structure.ExpressionStatement", true, false) != null && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getSourceNode(), "variable", false)), "med.quantities.structure.AveragingType");
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_ModuleVariableRef_738757997636264894(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("med.core.structure.AssignmentStatement");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode ass = SConceptOperations.createNewNode("med.quantities.structure.AveragingAssignmentStatement", null);
          SNode exprStmt = SNodeOperations.getAncestor(_context.getSourceNode(), "med.core.structure.ExpressionStatement", true, false);
          SNodeOperations.replaceWithAnother(exprStmt, ass);
          SLinkOperations.setTarget(ass, "var", _context.getSourceNode(), true);
          SLinkOperations.setNewChild(ass, "rvalue", "med.core.structure.Expression");
          return SLinkOperations.getTarget(ass, "rvalue", true);
        }

        public String getMatchingText(String pattern) {
          return "=/";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }
}
