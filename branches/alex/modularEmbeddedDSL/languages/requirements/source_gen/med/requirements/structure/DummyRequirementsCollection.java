package med.requirements.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DummyRequirementsCollection extends MedBase {
  public static final String concept = "med.requirements.structure.DummyRequirementsCollection";
  public static final String SHOW_REQUIREMENTS_IN_MODEL = "showRequirementsInModel";
  public static final String REQUIREMENTS = "requirements";

  public DummyRequirementsCollection(SNode node) {
    super(node);
  }

  public boolean getShowRequirementsInModel() {
    return this.getBooleanProperty(DummyRequirementsCollection.SHOW_REQUIREMENTS_IN_MODEL);
  }

  public void setShowRequirementsInModel(boolean value) {
    this.setBooleanProperty(DummyRequirementsCollection.SHOW_REQUIREMENTS_IN_MODEL, value);
  }

  public int getRequirementsesCount() {
    return this.getChildCount(DummyRequirementsCollection.REQUIREMENTS);
  }

  public Iterator<DummyRequirement> requirementses() {
    return this.children(DummyRequirement.class, DummyRequirementsCollection.REQUIREMENTS);
  }

  public List<DummyRequirement> getRequirementses() {
    return this.getChildren(DummyRequirement.class, DummyRequirementsCollection.REQUIREMENTS);
  }

  public void addRequirements(DummyRequirement node) {
    this.addChild(DummyRequirementsCollection.REQUIREMENTS, node);
  }

  public void insertRequirements(DummyRequirement prev, DummyRequirement node) {
    this.insertChild(prev, DummyRequirementsCollection.REQUIREMENTS, node);
  }

  public static DummyRequirementsCollection newInstance(SModel sm, boolean init) {
    return (DummyRequirementsCollection)SModelUtil_new.instantiateConceptDeclaration("med.requirements.structure.DummyRequirementsCollection", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DummyRequirementsCollection newInstance(SModel sm) {
    return DummyRequirementsCollection.newInstance(sm, false);
  }
}
