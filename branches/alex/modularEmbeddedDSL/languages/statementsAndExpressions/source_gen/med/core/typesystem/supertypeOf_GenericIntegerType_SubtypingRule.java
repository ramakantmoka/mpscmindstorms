package med.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class supertypeOf_GenericIntegerType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public supertypeOf_GenericIntegerType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode intnode, TypeCheckingContext typeCheckingContext) {
    List<SNode> supertypes = new ArrayList<SNode>();
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.UInt8", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.UInt16", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.UInt32", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.UInt64", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.Int8", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.Int16", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.Int32", null));
    ListSequence.fromList(supertypes).addElement(SConceptOperations.createNewNode("med.core.structure.Int64", null));
    return supertypes;
  }

  public String getApplicableConceptFQName() {
    return "med.core.structure.GenericIntegerType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return false;
  }
}
