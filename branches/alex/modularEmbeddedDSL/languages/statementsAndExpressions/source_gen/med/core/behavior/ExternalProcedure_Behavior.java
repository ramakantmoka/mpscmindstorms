package med.core.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ExternalProcedure_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getHeaderContent_8772584333841904462(SNode thisNode) {
    SNode proto = SConceptOperations.createNewNode("med.core.structure.ProcedurePrototype", null);
    SLinkOperations.setTarget(proto, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(thisNode, "type", true)), true);
    SPropertyOperations.set(proto, "name", SPropertyOperations.getString(thisNode, "name"));
    SPropertyOperations.set(proto, "qualifiedLowLevelName", IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(thisNode));
    for (SNode param : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameters", true))) {
      SLinkOperations.addChild(proto, "parameters", SNodeOperations.copyNode(param));
    }
    return proto;
  }

  public static String virtual_qualifiedLowLevelName_1842244113830232336(SNode thisNode) {
    // cannot rename it, it needs to have *exactly* the same name as the external procedure!
    return SPropertyOperations.getString(thisNode, "name");
  }
}
