package med.core.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class pointerstuffKeymap extends EditorCellKeyMap {
  public pointerstuffKeymap() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new pointerstuffKeymap.pointerstuffKeymap_Action0();
    this.putAction("alt+shift", "VK_A", action);
    action = new pointerstuffKeymap.pointerstuffKeymap_Action1();
    this.putAction("alt+shift", "VK_D", action);
  }

  public static class pointerstuffKeymap_Action0 extends EditorCellKeyMapAction {
    public pointerstuffKeymap_Action0() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "&&expr address of";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("med.core.structure.Expression")) {
        return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(node), "med.core.structure.PointerType"));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode addrOfParent = SNodeOperations.getAncestor(node, "med.core.structure.AddressOfExpression", true, false);
      if (addrOfParent != null) {
        SNode expr = SLinkOperations.getTarget(addrOfParent, "expression", true);
        SNodeOperations.replaceWithAnother(addrOfParent, expr);
      } else {
        SNode addrOf = SConceptOperations.createNewNode("med.core.structure.AddressOfExpression", null);
        SNodeOperations.replaceWithAnother(node, addrOf);
        SLinkOperations.setTarget(addrOf, "expression", node, true);
        SLinkOperations.getTarget(addrOf, "expression", true);
      }
    }

    public String getKeyStroke() {
      return "alt shift A";
    }
  }

  public static class pointerstuffKeymap_Action1 extends EditorCellKeyMapAction {
    public pointerstuffKeymap_Action1() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "*expr dereference pointer";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("med.core.structure.Expression")) {
        return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(node), "med.core.structure.PointerType");
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode derefparent = SNodeOperations.getAncestor(node, "med.core.structure.DereferenceExpression", true, false);
      if (derefparent != null) {
        SNode expr = SLinkOperations.getTarget(derefparent, "expression", true);
        SNodeOperations.replaceWithAnother(derefparent, expr);
      } else {
        SNode deref = SConceptOperations.createNewNode("med.core.structure.DereferenceExpression", null);
        SNodeOperations.replaceWithAnother(node, deref);
        SLinkOperations.setTarget(deref, "expression", node, true);
        SLinkOperations.getTarget(deref, "expression", true);
      }
    }

    public String getKeyStroke() {
      return "alt shift D";
    }
  }
}
