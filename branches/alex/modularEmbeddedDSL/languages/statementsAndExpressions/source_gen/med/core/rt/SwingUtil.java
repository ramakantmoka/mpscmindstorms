package med.core.rt;

/*Generated by MPS */

import javax.swing.JComponent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.JButton;
import java.awt.event.KeyEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JTextArea;
import java.awt.BorderLayout;
import javax.swing.JPanel;

public class SwingUtil {
  public SwingUtil() {
  }

  public static JComponent getComponent(EditorContext ctx, final SNode node) {
    String e = null;
    if (SNodeOperations.isInstanceOf(node, "med.core.structure.IHasIdentifierName")) {
      e = SPropertyOperations.getString(SNodeOperations.cast(node, "med.core.structure.IHasIdentifierName"), "name");
    } else {
      e = SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "name");
    }
    final String elementDescription = e;
    JButton editButton = new JButton();
    editButton.setText("edit");
    editButton.setMnemonic(KeyEvent.VK_E);
    editButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        final JFrame frame = createFrame(elementDescription);
        final Wrappers._T<String> txt = new Wrappers._T<String>(null);
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            txt.value = SPropertyOperations.getString(SNodeOperations.cast(node, "med.core.structure.IDocumentable"), "text");
          }
        });
        final JTextArea textArea = createTextArea(txt.value);
        frame.add(textArea, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        frame.add(buttonPanel, BorderLayout.SOUTH);

        JButton okButton = new JButton();
        okButton.setText("OK");
        okButton.setMnemonic(KeyEvent.VK_O);
        buttonPanel.add(okButton);

        JButton cancelButton = new JButton();
        cancelButton.setText("Cancel");
        cancelButton.setMnemonic(KeyEvent.VK_C);
        buttonPanel.add(cancelButton);


        okButton.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent p0) {
            ModelAccess.instance().runWriteActionInCommand(new Runnable() {
              public void run() {
                String txt = textArea.getText();
                if (!(txt.trim().equals(""))) {
                  SPropertyOperations.set(SNodeOperations.cast(node, "med.core.structure.IDocumentable"), "text", txt);
                } else {
                  SPropertyOperations.set(SNodeOperations.cast(node, "med.core.structure.IDocumentable"), "text", null);
                }
              }
            });
            frame.setVisible(false);
            frame.dispose();
          }
        });

        cancelButton.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent p0) {
            frame.setVisible(false);
            frame.dispose();
          }
        });

        frame.setVisible(true);
      }
    });
    return editButton;
  }

  public static JFrame createFrame(String elementDescription) {
    JFrame f = new JFrame();
    f.setTitle("Edit Documentation for " + elementDescription);
    f.setSize(600, 400);
    f.setLocation(200, 200);
    f.setLayout(new BorderLayout());
    return f;
  }

  public static JTextArea createTextArea(String initialText) {
    final JTextArea ta = new JTextArea();
    ta.setAutoscrolls(true);
    ta.setLineWrap(true);
    if (initialText != null) {
      ta.setText(initialText);
    }
    return ta;
  }
}
