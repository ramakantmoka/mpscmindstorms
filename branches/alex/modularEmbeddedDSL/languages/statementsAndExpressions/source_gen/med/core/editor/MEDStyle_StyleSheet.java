package med.core.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.MPSFonts;

public class MEDStyle_StyleSheet {
  public static Style getKeyWord(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_BLUE);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  public static Style getCompactKeyWord(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getKeyWord(null));
    return style;
  }

  public static Style getComment(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  public static Style getStringLiteral(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  public static Style getNumericLiteral(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.blue);
    return style;
  }

  public static Style getEmptyCell(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
    return style;
  }

  public static Style getOperator(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    return style;
  }

  public static Style getParenthesis(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    style.set(StyleAttributes.MATCHING_LABEL, "parenthesis");
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    return style;
  }

  public static Style getLeftParen(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getParenthesis(null));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  public static Style getLeftParenAfterName(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getLeftParen(null));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  public static Style getRightParen(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getParenthesis(null));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  public static Style getBrace(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    style.set(StyleAttributes.MATCHING_LABEL, "brace");
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    return style;
  }

  public static Style getLeftBrace(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getBrace(null));
    return style;
  }

  public static Style getRightBrace(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getBrace(null));
    return style;
  }

  public static Style getBracket(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.MATCHING_LABEL, "bracket");
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    return style;
  }

  public static Style getLeftBracket(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getBracket(null));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  public static Style getRightBracket(final EditorCell cell) {
    Style style = new Style(cell);
    style.putAll(MEDStyle_StyleSheet.getBracket(null));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  public static Style getSemicolon(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.EDITABLE, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  public static Style getDot(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    style.set(StyleAttributes.SELECTABLE, false);
    return style;
  }

  public static Style getBaseAngleBracket(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.MATCHING_LABEL, "AngleBracket");
    return style;
  }

  public static Style getMatching(final EditorCell cell) {
    Style style = new Style(cell);
    style.set(StyleAttributes.MATCHING_LABEL, "matching");
    return style;
  }
}
