package med.components.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InterfaceMapping extends MedBase {
  public static final String concept = "med.components.structure.InterfaceMapping";
  public static final String INTERFACE = "interface";
  public static final String SCOPE = "scope";
  public static final String DESCRIPTOR = "descriptor";

  public InterfaceMapping(SNode node) {
    super(node);
  }

  public Interface getInterface() {
    return (Interface)this.getReferent(Interface.class, InterfaceMapping.INTERFACE);
  }

  public void setInterface(Interface node) {
    super.setReferent(InterfaceMapping.INTERFACE, node);
  }

  public WiringScope getScope() {
    return (WiringScope)this.getChild(WiringScope.class, InterfaceMapping.SCOPE);
  }

  public void setScope(WiringScope node) {
    super.setChild(InterfaceMapping.SCOPE, node);
  }

  public ComponentDescriptor getDescriptor() {
    return (ComponentDescriptor)this.getChild(ComponentDescriptor.class, InterfaceMapping.DESCRIPTOR);
  }

  public void setDescriptor(ComponentDescriptor node) {
    super.setChild(InterfaceMapping.DESCRIPTOR, node);
  }

  public static InterfaceMapping newInstance(SModel sm, boolean init) {
    return (InterfaceMapping)SModelUtil_new.instantiateConceptDeclaration("med.components.structure.InterfaceMapping", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InterfaceMapping newInstance(SModel sm) {
    return InterfaceMapping.newInstance(sm, false);
  }
}
