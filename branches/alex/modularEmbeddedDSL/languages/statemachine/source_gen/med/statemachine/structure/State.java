package med.statemachine.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IHasIdentifierName;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class State extends MedBase implements IHasIdentifierName {
  public static final String concept = "med.statemachine.structure.State";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INITIAL = "initial";
  public static final String ENTRY = "entry";
  public static final String EXIT = "exit";
  public static final String TRANSITIONS = "transitions";

  public State(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(State.NAME);
  }

  public void setName(String value) {
    this.setProperty(State.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(State.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(State.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(State.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(State.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(State.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(State.VIRTUAL_PACKAGE, value);
  }

  public boolean getInitial() {
    return this.getBooleanProperty(State.INITIAL);
  }

  public void setInitial(boolean value) {
    this.setBooleanProperty(State.INITIAL, value);
  }

  public int getEntriesCount() {
    return this.getChildCount(State.ENTRY);
  }

  public Iterator<EntryAction> entries() {
    return this.children(EntryAction.class, State.ENTRY);
  }

  public List<EntryAction> getEntries() {
    return this.getChildren(EntryAction.class, State.ENTRY);
  }

  public void addEntry(EntryAction node) {
    this.addChild(State.ENTRY, node);
  }

  public void insertEntry(EntryAction prev, EntryAction node) {
    this.insertChild(prev, State.ENTRY, node);
  }

  public int getExitsCount() {
    return this.getChildCount(State.EXIT);
  }

  public Iterator<ExitAction> exits() {
    return this.children(ExitAction.class, State.EXIT);
  }

  public List<ExitAction> getExits() {
    return this.getChildren(ExitAction.class, State.EXIT);
  }

  public void addExit(ExitAction node) {
    this.addChild(State.EXIT, node);
  }

  public void insertExit(ExitAction prev, ExitAction node) {
    this.insertChild(prev, State.EXIT, node);
  }

  public int getTransitionsesCount() {
    return this.getChildCount(State.TRANSITIONS);
  }

  public Iterator<Transition> transitionses() {
    return this.children(Transition.class, State.TRANSITIONS);
  }

  public List<Transition> getTransitionses() {
    return this.getChildren(Transition.class, State.TRANSITIONS);
  }

  public void addTransitions(Transition node) {
    this.addChild(State.TRANSITIONS, node);
  }

  public void insertTransitions(Transition prev, Transition node) {
    this.insertChild(prev, State.TRANSITIONS, node);
  }

  public static State newInstance(SModel sm, boolean init) {
    return (State)SModelUtil_new.instantiateConceptDeclaration("med.statemachine.structure.State", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static State newInstance(SModel sm) {
    return State.newInstance(sm, false);
  }
}
