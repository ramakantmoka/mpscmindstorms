package med.dataflowblocks.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import med.core.structure.IHasIdentifierName;
import med.core.structure.IExportableModuleContent;
import jetbrains.mps.smodel.SNode;
import med.core.structure.StatementList;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BlockType extends BaseConcept implements IHasIdentifierName, IExportableModuleContent {
  public static final String concept = "med.dataflowblocks.structure.BlockType";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXPORT = "export";
  public static final String BODY = "body";
  public static final String INPORTS = "inports";
  public static final String OUTPORTS = "outports";

  public BlockType(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BlockType.NAME);
  }

  public void setName(String value) {
    this.setProperty(BlockType.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BlockType.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BlockType.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BlockType.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BlockType.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BlockType.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BlockType.VIRTUAL_PACKAGE, value);
  }

  public boolean getExport() {
    return this.getBooleanProperty(BlockType.EXPORT);
  }

  public void setExport(boolean value) {
    this.setBooleanProperty(BlockType.EXPORT, value);
  }

  public StatementList getBody() {
    return (StatementList)this.getChild(StatementList.class, BlockType.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(BlockType.BODY, node);
  }

  public int getInportsesCount() {
    return this.getChildCount(BlockType.INPORTS);
  }

  public Iterator<PortType> inportses() {
    return this.children(PortType.class, BlockType.INPORTS);
  }

  public List<PortType> getInportses() {
    return this.getChildren(PortType.class, BlockType.INPORTS);
  }

  public void addInports(PortType node) {
    this.addChild(BlockType.INPORTS, node);
  }

  public void insertInports(PortType prev, PortType node) {
    this.insertChild(prev, BlockType.INPORTS, node);
  }

  public int getOutportsesCount() {
    return this.getChildCount(BlockType.OUTPORTS);
  }

  public Iterator<PortType> outportses() {
    return this.children(PortType.class, BlockType.OUTPORTS);
  }

  public List<PortType> getOutportses() {
    return this.getChildren(PortType.class, BlockType.OUTPORTS);
  }

  public void addOutports(PortType node) {
    this.addChild(BlockType.OUTPORTS, node);
  }

  public void insertOutports(PortType prev, PortType node) {
    this.insertChild(prev, BlockType.OUTPORTS, node);
  }

  public static BlockType newInstance(SModel sm, boolean init) {
    return (BlockType)SModelUtil_new.instantiateConceptDeclaration("med.dataflowblocks.structure.BlockType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BlockType newInstance(SModel sm) {
    return BlockType.newInstance(sm, false);
  }
}
