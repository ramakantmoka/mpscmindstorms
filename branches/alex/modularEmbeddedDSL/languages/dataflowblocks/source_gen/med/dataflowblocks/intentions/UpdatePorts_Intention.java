package med.dataflowblocks.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class UpdatePorts_Intention extends BaseIntention {
  public UpdatePorts_Intention() {
  }

  public String getConcept() {
    return "med.dataflowblocks.structure.Block";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "refresh";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    for (final SNode pt : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "porttype", false), "outports", true))) {
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "ports", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "porttype", false) == pt;
        }
      }).isEmpty()) {
        SNode p = SConceptOperations.createNewNode("med.dataflowblocks.structure.Port", null);
        SLinkOperations.setTarget(p, "porttype", pt, false);
        SLinkOperations.addChild(node, "ports", p);
      }
    }
  }

  public String getLocationString() {
    return "med.dataflowblocks.intentions";
  }
}
