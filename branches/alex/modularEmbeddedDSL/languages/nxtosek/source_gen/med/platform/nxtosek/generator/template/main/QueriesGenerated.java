package med.platform.nxtosek.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import med.core.behavior.IHasIdentifierName_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_1467202028512538964(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + "_OSEK";
  }

  public static Object propertyMacro_GetPropertyValue_1467202028512539418(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + ".oil";
  }

  public static Object propertyMacro_GetPropertyValue_3454436015655311645(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_3577454086726235831(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "message");
  }

  public static Object propertyMacro_GetPropertyValue_3577454086728543146(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "TASK(" + IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode()) + ")";
  }

  public static Object propertyMacro_GetPropertyValue_3577454086729519196(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_7301321101283838188(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), "numerOfMilliseconds");
  }

  public static Object propertyMacro_GetPropertyValue_8437501635617638829(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "  PRIORITY = " + SPropertyOperations.getInteger(SLinkOperations.getTarget(_context.getNode(), "scheduling", true), "priority") + ";";
  }

  public static Object propertyMacro_GetPropertyValue_8437501635617638954(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_8437501635617638969(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "  PRIORITY = " + SPropertyOperations.getInteger(SLinkOperations.getTarget(_context.getNode(), "scheduling", true), "priority") + ";";
  }

  public static Object propertyMacro_GetPropertyValue_8437501635617639017(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode()) + "_alarm";
  }

  public static Object propertyMacro_GetPropertyValue_8437501635617639041(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_8437501635617639060(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "" + (SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "scheduling", true), "med.tasks.structure.SchedulingPolicyCyclic"), "every"));
  }

  public static Object propertyMacro_GetPropertyValue_8609407923442631410(final IOperationContext operationContext, final PropertyMacroContext _context) {
    List<String> names = new ArrayList<String>();
    for (SNode rr : SLinkOperations.getTargets(_context.getNode(), "resources", true)) {
      names.add(SPropertyOperations.getString(SLinkOperations.getTarget(rr, "resource", false), "name") + ".c");
    }
    for (SNode r : ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "resources", true))) {
      for (SNode m : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(r, "resource", false), "modules", true))) {
        for (SNode imp : ListSequence.fromList(SLinkOperations.getTargets(m, "imports", true))) {
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(imp, "importedModule", false), "med.core.structure.ExternalModule")) {
            List<SNode> lr = SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(imp, "importedModule", false), "med.core.structure.ExternalModule"), "linkedResource", true);
            ListSequence.fromList(names).addSequence(ListSequence.fromList(lr).select(new ISelector<SNode, String>() {
              public String select(SNode it) {
                return "../../../osek_mps_lib/" + SPropertyOperations.getString(it, "filename");
              }
            }));
          }
        }
      }
    }

    String res = "";
    boolean first = true;
    for (String n : ListSequence.fromList(names)) {
      if (first) {
        res += n;
        first = false;
      } else {
        res += " \\\n\t" + n;
      }
    }
    return res;
  }

  public static SNode sourceNodeQuery_3577454086728545345(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_6821937377367729505(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static Iterable sourceNodesQuery_3577454086729782874(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> tasks = new ArrayList<SNode>();
    for (SNode r : SLinkOperations.getTargets(_context.getNode(), "resources", true)) {
      ListSequence.fromList(tasks).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(r, "resource", false), "med.tasks.structure.Task", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "scheduling", true), "med.tasks.structure.SchedulingPolicyOnceUponStartup");
        }
      }));
    }
    return tasks;
  }

  public static Iterable sourceNodesQuery_8437501635617638872(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> tasks = new ArrayList<SNode>();
    for (SNode r : SLinkOperations.getTargets(_context.getNode(), "resources", true)) {
      ListSequence.fromList(tasks).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(r, "resource", false), "med.tasks.structure.Task", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "scheduling", true), "med.tasks.structure.SchedulingPolicyCyclic");
        }
      }));
    }
    return tasks;
  }

  public static void mappingScript_CodeBlock_3104433618260429515(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> resources = SModelOperations.getRoots(_context.getModel(), "med.core.structure.Resource");
    for (SNode r : ListSequence.fromList(resources)) {
      SLinkOperations.removeAllChildren(r, "includes");
      SNode i1 = SConceptOperations.createNewNode("med.core.structure.CustomInclude", null);
      SPropertyOperations.set(i1, "filename", "kernel.h");
      SLinkOperations.addChild(r, "includes", i1);
      SNode i2 = SConceptOperations.createNewNode("med.core.structure.CustomInclude", null);
      SPropertyOperations.set(i2, "filename", "kernel_id.h");
      SLinkOperations.addChild(r, "includes", i2);
    }
  }

  public static void mappingScript_CodeBlock_6254144863182533036(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> resources = SModelOperations.getRoots(_context.getModel(), "med.core.structure.Resource");
    List<SNode> modules = new ArrayList<SNode>();
    for (SNode r : ListSequence.fromList(resources)) {
      ListSequence.fromList(modules).addSequence(ListSequence.fromList(SLinkOperations.getTargets(r, "modules", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "med.core.structure.ImplementationModule");
        }
      }));
    }

    SNode declareCounter = SConceptOperations.createNewNode("med.core.structure.TextBlock", null);
    SPropertyOperations.set(declareCounter, "text", "DeclareCounter(SysTimerCnt); // added by platform.osek:addCounterTrigger");
    SLinkOperations.addChild(SNodeOperations.cast(ListSequence.fromList(modules).first(), "med.core.structure.ImplementationModule"), "contents", declareCounter);

    SNode counterTrigger = SConceptOperations.createNewNode("med.core.structure.TextBlock", null);
    SPropertyOperations.set(counterTrigger, "text", "void user_1ms_isr_type2(void) { SignalCounter(SysTimerCnt); } // added by platform.osek:addCounterTrigger");
    SLinkOperations.addChild(SNodeOperations.cast(ListSequence.fromList(modules).first(), "med.core.structure.ImplementationModule"), "contents", counterTrigger);
  }

  public static void mappingScript_CodeBlock_8437501635617944472(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> resources = SModelOperations.getRoots(_context.getModel(), "med.core.structure.Resource");
    for (SNode r : ListSequence.fromList(resources)) {
      for (SNode m : ListSequence.fromList(SLinkOperations.getTargets(r, "modules", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "med.core.structure.ImplementationModule");
        }
      })) {
        for (SNode t : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(m, "med.core.structure.ImplementationModule"), "contents", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "med.tasks.structure.Task");
          }
        })) {
          SNode s = SConceptOperations.createNewNode("med.core.structure.TextualCodeStatement", null);
          SPropertyOperations.set(s, "code", "TerminateTask(); // automatically added by platform.osek:addTermianateTask");
          SLinkOperations.addChild(SLinkOperations.getTarget(SNodeOperations.cast(t, "med.tasks.structure.Task"), "body", true), "statements", s);
        }
      }
    }
  }
}
