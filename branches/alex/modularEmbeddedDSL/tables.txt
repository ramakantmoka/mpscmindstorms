I have two example cases I want to express as tables.

1) Requirements
A RequirementsCollection contains a number of Requirements.
A requirement has a name, a text and a set of RequirementsDependenceis
which point to other requirements.

I would like to show a table that looks like the following:

--------------------------------------------------------
| Name      | Text                      | Dependencies |
--------------------------------------------------------
| R1        | Here is a req             |              |
--------------------------------------------------------
| R2        | Another one               | refines R1   |
|           |                           | refines R2   |                       
--------------------------------------------------------
| R3        | Here is req 3             |              |
--------------------------------------------------------

In this case the set of columns is predefined and for each
requirement I want to add a row. The set of columns could
be defined as part of the editor definition. A row could be
simply a list of cells.

2) State Machines

A StateMachine consists of States and Events. A state has a name and
a set of Transitions. A Transition is triggered by an Event and points
to a target state.

The table should look like this:

----------------------------------------------------------------------------------
|          | State-1    | State-2 | State-3                  | ....    | State-n |
----------------------------------------------------------------------------------
| Event-1  | -> State-2 |         |                          |         |         |
----------------------------------------------------------------------------------
| Event-2  |            |         |                          |         |         |
----------------------------------------------------------------------------------
| Event-3  |            |         | [true] -> State-3        |         |         |
|          |            |         | [x>3]  -> State-4        |         |         |
----------------------------------------------------------------------------------
| Event-4  |            |         |                          |         |         |
----------------------------------------------------------------------------------
| ...      |            |         |                          |         |         |
----------------------------------------------------------------------------------
| Event-m  |            |         |                          |         |         |
----------------------------------------------------------------------------------

In this case the set of columns and the set of rows depends on the tree.
A content cell contains the set of Transitions that go from the column's State
when the row's event is received.



How could the table definition look like in the editor definition?

editor for concept StateMachine:
  node cell layout:
      // we create a new editor thingy for tables
    [# table 
	    // the rowheaders thing defines the colleciton of
	    // nodes that should become the row headers. A separate
	    // editor definition for states (see below) is provided
	  rowheaders -> [% states %]
	    // the colheaders thing defines the colleciton of
	    // nodes that should become the column headers. A separate
	    // editor definition for events (see below) is provided
	  colheaders -> [% events %]
	    // here is where it becomes interesting. 
		// The actual content cells should be defined directly here
		// and show be able to contain arbitrary layouted stuff
		// (vertical child list, etc). Here we define it to
		// contain the guard expression and the target state
		// note that we need a function in the inspector to 
		// return the actual Transition instance that should
		// be put into a given cell.
	  cells -> [% cell root concept = Transition 
	              [% guard %] ->  [%targetState%]
	           %]
	#]
	------inspector ----------
	  // this "query" function in the inspector allows us to calculate
	  // which Transition instance should go into a particular cell
	cellCOntentFinder: ( node, col, row ) {
	  // node is of type state machine, the root node for the whole table
	  // return the transition node that should go into col/row cell
	}
	
	
  

editor for concept State:
  node cell layout:
    {name}
	
editor for concept Event:
  node cell layout:
    {name}
	

  
	