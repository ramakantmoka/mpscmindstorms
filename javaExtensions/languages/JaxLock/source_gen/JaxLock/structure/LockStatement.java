package JaxLock.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.StatementList;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LockStatement extends Statement {
  public static final String concept = "JaxLock.structure.LockStatement";
  public static final String BODY = "body";
  public static final String LOCK_EXPR = "lockExpr";

  public LockStatement(SNode node) {
    super(node);
  }

  public StatementList getBody() {
    return (StatementList) this.getChild(StatementList.class, LockStatement.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(LockStatement.BODY, node);
  }

  public Expression getLockExpr() {
    return (Expression) this.getChild(Expression.class, LockStatement.LOCK_EXPR);
  }

  public void setLockExpr(Expression node) {
    super.setChild(LockStatement.LOCK_EXPR, node);
  }

  public static LockStatement newInstance(SModel sm, boolean init) {
    return (LockStatement) SModelUtil_new.instantiateConceptDeclaration("JaxLock.structure.LockStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LockStatement newInstance(SModel sm) {
    return LockStatement.newInstance(sm, false);
  }
}
