package statemachine.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_FireStateMachineEventStmt_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_FireStateMachineEventStmt_InferenceRule() {
  }

  public void applyRule(final SNode stmt, final TypeCheckingContext typeCheckingContext) {
    {
      final SNode t = typeCheckingContext.typeOf(SLinkOperations.getTarget(stmt, "target", true), "r:f6969c0a-d373-42b3-8422-53359952542e(statemachine.typesystem)", "283525386814797597", true);
      typeCheckingContext.whenConcrete(t, new Runnable() {
        public void run() {
          if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getEquationManager().getRepresentator(t), "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
            {
              BaseIntentionProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              typeCheckingContext.reportTypeError(stmt, "State machine is required 1", "r:f6969c0a-d373-42b3-8422-53359952542e(statemachine.typesystem)", "4506699033619034512", intentionProvider, errorTarget);
            }
            return;
          }
          SNode ct = SNodeOperations.cast(typeCheckingContext.getEquationManager().getRepresentator(t), "jetbrains.mps.baseLanguage.structure.ClassifierType");
          SNode cls = SLinkOperations.getTarget(ct, "classifier", false);
          if (!(SNodeOperations.isInstanceOf(cls, "statemachine.structure.StatemachineClass"))) {
            {
              BaseIntentionProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              typeCheckingContext.reportTypeError(stmt, "State machine is required 2 " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(ct, "classifier", false)), "name"), "r:f6969c0a-d373-42b3-8422-53359952542e(statemachine.typesystem)", "4506699033619034556", intentionProvider, errorTarget);
            }
            return;
          }
        }
      }, "r:f6969c0a-d373-42b3-8422-53359952542e(statemachine.typesystem)", "4506699033619034471", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "statemachine.structure.FireStateMachineEventStmt";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
