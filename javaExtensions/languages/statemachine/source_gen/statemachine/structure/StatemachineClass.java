package statemachine.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StatemachineClass extends ClassConcept {
  public static final String concept = "statemachine.structure.StatemachineClass";
  public static final String EVENT = "event";
  public static final String STATES = "states";

  public StatemachineClass(SNode node) {
    super(node);
  }

  public int getEventsCount() {
    return this.getChildCount(StatemachineClass.EVENT);
  }

  public Iterator<Event> events() {
    return this.children(Event.class, StatemachineClass.EVENT);
  }

  public List<Event> getEvents() {
    return this.getChildren(Event.class, StatemachineClass.EVENT);
  }

  public void addEvent(Event node) {
    this.addChild(StatemachineClass.EVENT, node);
  }

  public void insertEvent(Event prev, Event node) {
    this.insertChild(prev, StatemachineClass.EVENT, node);
  }

  public int getStatesesCount() {
    return this.getChildCount(StatemachineClass.STATES);
  }

  public Iterator<State> stateses() {
    return this.children(State.class, StatemachineClass.STATES);
  }

  public List<State> getStateses() {
    return this.getChildren(State.class, StatemachineClass.STATES);
  }

  public void addStates(State node) {
    this.addChild(StatemachineClass.STATES, node);
  }

  public void insertStates(State prev, State node) {
    this.insertChild(prev, StatemachineClass.STATES, node);
  }

  public static StatemachineClass newInstance(SModel sm, boolean init) {
    return (StatemachineClass)SModelUtil_new.instantiateConceptDeclaration("statemachine.structure.StatemachineClass", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StatemachineClass newInstance(SModel sm) {
    return StatemachineClass.newInstance(sm, false);
  }
}
