package statemachine.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class FireStateMachineEventStmt extends Statement {
  public static final String concept = "statemachine.structure.FireStateMachineEventStmt";
  public static final String EVENT = "event";
  public static final String TARGET = "target";
  public static final String ACTUAL = "actual";

  public FireStateMachineEventStmt(SNode node) {
    super(node);
  }

  public Event getEvent() {
    return (Event)this.getReferent(Event.class, FireStateMachineEventStmt.EVENT);
  }

  public void setEvent(Event node) {
    super.setReferent(FireStateMachineEventStmt.EVENT, node);
  }

  public Expression getTarget() {
    return (Expression)this.getChild(Expression.class, FireStateMachineEventStmt.TARGET);
  }

  public void setTarget(Expression node) {
    super.setChild(FireStateMachineEventStmt.TARGET, node);
  }

  public int getActualsCount() {
    return this.getChildCount(FireStateMachineEventStmt.ACTUAL);
  }

  public Iterator<Expression> actuals() {
    return this.children(Expression.class, FireStateMachineEventStmt.ACTUAL);
  }

  public List<Expression> getActuals() {
    return this.getChildren(Expression.class, FireStateMachineEventStmt.ACTUAL);
  }

  public void addActual(Expression node) {
    this.addChild(FireStateMachineEventStmt.ACTUAL, node);
  }

  public void insertActual(Expression prev, Expression node) {
    this.insertChild(prev, FireStateMachineEventStmt.ACTUAL, node);
  }

  public static FireStateMachineEventStmt newInstance(SModel sm, boolean init) {
    return (FireStateMachineEventStmt)SModelUtil_new.instantiateConceptDeclaration("statemachine.structure.FireStateMachineEventStmt", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static FireStateMachineEventStmt newInstance(SModel sm) {
    return FireStateMachineEventStmt.newInstance(sm, false);
  }
}
