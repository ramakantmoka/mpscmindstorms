package med.base.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.SNode;

public class increaseLevel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(increaseLevel_Action.class);

  private SModelDescriptor descriptor;

  public increaseLevel_Action() {
    super("Increase Detail Level", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl shift D";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "increaseLevel", t);
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.descriptor = event.getData(MPSDataKeys.CONTEXT_MODEL);
    if (this.descriptor == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      for (SNode n : increaseLevel_Action.this.descriptor.getSModel().getRoots()) {
        System.out.println(n);
        n.setProperty("currentLevel", "all");
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "increaseLevel", t);
    }
  }
}
