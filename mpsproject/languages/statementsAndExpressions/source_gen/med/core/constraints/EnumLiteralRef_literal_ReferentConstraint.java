package med.core.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import med.core.behavior.ImplementationModule_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.constraints.PresentationReferentConstraintContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class EnumLiteralRef_literal_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public EnumLiteralRef_literal_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("med.core.structure.EnumLiteralRef", "literal", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("med.core.structure.EnumLiteralRef", "literal");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode en : ImplementationModule_Behavior.call_visibleInstancesOfType_7301321101283468502(SNodeOperations.getAncestor(_context.getEnclosingNode(), "med.core.structure.ImplementationModule", false, false), SConceptOperations.findConceptDeclaration("med.core.structure.EnumDeclaration"))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(en, "med.core.structure.EnumDeclaration"), "literals", true)));
    }
    return res;
  }

  public boolean hasPresentation() {
    return true;
  }

  public String getPresentation(final IOperationContext operationContext, final PresentationReferentConstraintContext _context) {
    return SPropertyOperations.getString(SNodeOperations.getAncestor(_context.getParameterNode(), "med.core.structure.EnumDeclaration", false, false), "name") + "::" + SPropertyOperations.getString(_context.getParameterNode(), "name");
  }
}
