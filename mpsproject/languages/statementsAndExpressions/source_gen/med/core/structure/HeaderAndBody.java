package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class HeaderAndBody extends MedBase implements IModuleContent, IReduceToImplementation, IDocumentable {
  public static final String concept = "med.core.structure.HeaderAndBody";
  public static final String HEADER = "header";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TEXT = "text";
  public static final String BODY = "body";

  public HeaderAndBody(SNode node) {
    super(node);
  }

  public String getHeader() {
    return this.getProperty(HeaderAndBody.HEADER);
  }

  public void setHeader(String value) {
    this.setProperty(HeaderAndBody.HEADER, value);
  }

  public String getShortDescription() {
    return this.getProperty(HeaderAndBody.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(HeaderAndBody.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(HeaderAndBody.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(HeaderAndBody.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(HeaderAndBody.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(HeaderAndBody.VIRTUAL_PACKAGE, value);
  }

  public String getText() {
    return this.getProperty(HeaderAndBody.TEXT);
  }

  public void setText(String value) {
    this.setProperty(HeaderAndBody.TEXT, value);
  }

  public StatementList getBody() {
    return (StatementList)this.getChild(StatementList.class, HeaderAndBody.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(HeaderAndBody.BODY, node);
  }

  public static HeaderAndBody newInstance(SModel sm, boolean init) {
    return (HeaderAndBody)SModelUtil_new.instantiateConceptDeclaration("med.core.structure.HeaderAndBody", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static HeaderAndBody newInstance(SModel sm) {
    return HeaderAndBody.newInstance(sm, false);
  }
}
