package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Resource extends MedBase implements IHasIdentifierName, IProjectionLevelProvider {
  public static final String concept = "med.core.structure.Resource";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INTERNALS = "internals";
  public static final String MODULES = "modules";
  public static final String INCLUDES = "includes";
  public static final String PROJECTION_LEVELS = "projectionLevels";

  public Resource(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Resource.NAME);
  }

  public void setName(String value) {
    this.setProperty(Resource.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Resource.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Resource.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Resource.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Resource.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Resource.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Resource.VIRTUAL_PACKAGE, value);
  }

  public int getInternalsesCount() {
    return this.getChildCount(Resource.INTERNALS);
  }

  public Iterator<IInternalModuleContent> internalses() {
    return this.children(IInternalModuleContent.class, Resource.INTERNALS);
  }

  public List<IInternalModuleContent> getInternalses() {
    return this.getChildren(IInternalModuleContent.class, Resource.INTERNALS);
  }

  public void addInternals(IInternalModuleContent node) {
    this.addChild(Resource.INTERNALS, node);
  }

  public void insertInternals(IInternalModuleContent prev, IInternalModuleContent node) {
    this.insertChild(prev, Resource.INTERNALS, node);
  }

  public int getModulesesCount() {
    return this.getChildCount(Resource.MODULES);
  }

  public Iterator<Module> moduleses() {
    return this.children(Module.class, Resource.MODULES);
  }

  public List<Module> getModuleses() {
    return this.getChildren(Module.class, Resource.MODULES);
  }

  public void addModules(Module node) {
    this.addChild(Resource.MODULES, node);
  }

  public void insertModules(Module prev, Module node) {
    this.insertChild(prev, Resource.MODULES, node);
  }

  public int getIncludesesCount() {
    return this.getChildCount(Resource.INCLUDES);
  }

  public Iterator<CustomInclude> includeses() {
    return this.children(CustomInclude.class, Resource.INCLUDES);
  }

  public List<CustomInclude> getIncludeses() {
    return this.getChildren(CustomInclude.class, Resource.INCLUDES);
  }

  public void addIncludes(CustomInclude node) {
    this.addChild(Resource.INCLUDES, node);
  }

  public void insertIncludes(CustomInclude prev, CustomInclude node) {
    this.insertChild(prev, Resource.INCLUDES, node);
  }

  public int getProjectionLevelsesCount() {
    return this.getChildCount(Resource.PROJECTION_LEVELS);
  }

  public Iterator<ProjectionLevel> projectionLevelses() {
    return this.children(ProjectionLevel.class, Resource.PROJECTION_LEVELS);
  }

  public List<ProjectionLevel> getProjectionLevelses() {
    return this.getChildren(ProjectionLevel.class, Resource.PROJECTION_LEVELS);
  }

  public void addProjectionLevels(ProjectionLevel node) {
    this.addChild(Resource.PROJECTION_LEVELS, node);
  }

  public void insertProjectionLevels(ProjectionLevel prev, ProjectionLevel node) {
    this.insertChild(prev, Resource.PROJECTION_LEVELS, node);
  }

  public static Resource newInstance(SModel sm, boolean init) {
    return (Resource)SModelUtil_new.instantiateConceptDeclaration("med.core.structure.Resource", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Resource newInstance(SModel sm) {
    return Resource.newInstance(sm, false);
  }
}
