package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DereferenceExpression extends Expression implements ILValue, IVariableReference {
  public static final String concept = "med.core.structure.DereferenceExpression";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXPRESSION = "expression";

  public DereferenceExpression(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(DereferenceExpression.NAME);
  }

  public void setName(String value) {
    this.setProperty(DereferenceExpression.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(DereferenceExpression.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DereferenceExpression.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DereferenceExpression.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DereferenceExpression.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DereferenceExpression.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DereferenceExpression.VIRTUAL_PACKAGE, value);
  }

  public Expression getExpression() {
    return (Expression)this.getChild(Expression.class, DereferenceExpression.EXPRESSION);
  }

  public void setExpression(Expression node) {
    super.setChild(DereferenceExpression.EXPRESSION, node);
  }

  public static DereferenceExpression newInstance(SModel sm, boolean init) {
    return (DereferenceExpression)SModelUtil_new.instantiateConceptDeclaration("med.core.structure.DereferenceExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DereferenceExpression newInstance(SModel sm) {
    return DereferenceExpression.newInstance(sm, false);
  }
}
