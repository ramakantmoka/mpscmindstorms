package med.platform.nxtosek.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import med.core.behavior.Resource_Behavior;
import med.core.behavior.IHasIdentifierName_Behavior;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_1467202028512538964(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + "_OSEK";
  }

  public static Object propertyMacro_GetPropertyValue_1467202028512539040(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return Resource_Behavior.call_cFileName_306587673255505640(_context.getNode()) + ".c";
  }

  public static Object propertyMacro_GetPropertyValue_1467202028512539418(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + ".oil";
  }

  public static Object propertyMacro_GetPropertyValue_3454436015655311645(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_3577454086726235831(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "message");
  }

  public static Object propertyMacro_GetPropertyValue_3577454086728543146(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "TASK(" + IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode()) + ")";
  }

  public static Object propertyMacro_GetPropertyValue_3577454086729519196(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IHasIdentifierName_Behavior.call_qualifiedLowLevelName_1842244113830232336(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_7301321101283838188(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), "numerOfMilliseconds");
  }

  public static SNode sourceNodeQuery_3577454086728545345(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static Iterable sourceNodesQuery_1467202028512538986(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode rr : SLinkOperations.getTargets(_context.getNode(), "resources", true)) {
      ListSequence.fromList(result).addElement(SLinkOperations.getTarget(rr, "resource", false));
    }
    return result;
  }

  public static Iterable sourceNodesQuery_3577454086729782874(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> tasks = new ArrayList<SNode>();
    for (SNode r : SLinkOperations.getTargets(_context.getNode(), "resources", true)) {
      ListSequence.fromList(tasks).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(r, "resource", false), "med.tasks.structure.Task", false, new String[]{})));
    }
    return tasks;
  }

  public static void mappingScript_CodeBlock_3104433618260429515(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> resources = SModelOperations.getRoots(_context.getModel(), "med.core.structure.Resource");
    for (SNode r : ListSequence.fromList(resources)) {
      SLinkOperations.removeAllChildren(r, "includes");
      SNode i1 = SConceptOperations.createNewNode("med.core.structure.CustomInclude", null);
      SPropertyOperations.set(i1, "filename", "kernel.h");
      SLinkOperations.addChild(r, "includes", i1);
      SNode i2 = SConceptOperations.createNewNode("med.core.structure.CustomInclude", null);
      SPropertyOperations.set(i2, "filename", "kernel_id.h");
      SLinkOperations.addChild(r, "includes", i2);
    }
  }
}
