package featureDependencies.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class addFeatureDependencyAnnotation_Intention extends BaseIntention {
  public addFeatureDependencyAnnotation_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Feature Dependency";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole("featureDependencyAnnotation"), true) == null && !(SNodeOperations.isInstanceOf(node, "featureDependencies.structure.FeatureClause"));
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode clause = SLinkOperations.setNewChild(node, AttributesRolesUtil.childRoleFromAttributeRole("featureDependencyAnnotation"), "featureDependencies.structure.FeatureClause");
    editorContext.selectBefore(SLinkOperations.getTarget(clause, "expression", true));
  }

  public String getLocationString() {
    return "featureDependencies.intentions";
  }
}
