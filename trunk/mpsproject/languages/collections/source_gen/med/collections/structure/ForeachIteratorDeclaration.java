package med.collections.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IVariableDeclaration;
import med.core.structure.IHasIdentifierName;
import jetbrains.mps.smodel.SNode;
import med.core.structure.Type;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ForeachIteratorDeclaration extends MedBase implements IVariableDeclaration, IHasIdentifierName {
  public static final String concept = "med.collections.structure.ForeachIteratorDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TYPE = "type";

  public ForeachIteratorDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(ForeachIteratorDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(ForeachIteratorDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(ForeachIteratorDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ForeachIteratorDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ForeachIteratorDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ForeachIteratorDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ForeachIteratorDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ForeachIteratorDeclaration.VIRTUAL_PACKAGE, value);
  }

  public Type getType() {
    return (Type)this.getChild(Type.class, ForeachIteratorDeclaration.TYPE);
  }

  public void setType(Type node) {
    super.setChild(ForeachIteratorDeclaration.TYPE, node);
  }

  public static ForeachIteratorDeclaration newInstance(SModel sm, boolean init) {
    return (ForeachIteratorDeclaration)SModelUtil_new.instantiateConceptDeclaration("med.collections.structure.ForeachIteratorDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ForeachIteratorDeclaration newInstance(SModel sm) {
    return ForeachIteratorDeclaration.newInstance(sm, false);
  }
}
