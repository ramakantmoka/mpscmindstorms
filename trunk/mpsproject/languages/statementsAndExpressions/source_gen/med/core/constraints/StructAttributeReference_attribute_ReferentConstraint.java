package med.core.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class StructAttributeReference_attribute_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public StructAttributeReference_attribute_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("med.core.structure.StructAttributeReference", "attribute", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("med.core.structure.StructAttributeReference", "attribute");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode varType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getReferenceNode(), "variable", true));
    if (SNodeOperations.isInstanceOf(varType, "med.core.structure.PointerType")) {
      varType = SLinkOperations.getTarget(SNodeOperations.cast(varType, "med.core.structure.PointerType"), "baseType", true);
    }
    if (SNodeOperations.isInstanceOf(varType, "med.core.structure.GenericStructType")) {
      SNode struct = SLinkOperations.getTarget((SNode)varType, "struct", false);
      return SLinkOperations.getTargets(struct, "attributes", true);
    } else {
      return null;
    }
  }
}
