package featureDependencies.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class QueriesGenerated {
  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_AtomicFE_5047504493555896630(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("featureDependencies.structure.OrFE");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode newNode = SConceptOperations.createNewNode("featureDependencies.structure.NotFE", null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), newNode);
          SLinkOperations.setTarget(newNode, "expr", _context.getSourceNode(), true);
          return SLinkOperations.getTarget(newNode, "expr", true);
        }

        public String getMatchingText(String pattern) {
          return "!";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_AtomicFE_8261019787198123100(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("featureDependencies.structure.AndFE");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode newNode = SConceptOperations.createNewNode("featureDependencies.structure.AndFE", null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), newNode);
          SLinkOperations.setTarget(newNode, "left", _context.getSourceNode(), true);
          return SLinkOperations.getTarget(newNode, "right", true);
        }

        public String getMatchingText(String pattern) {
          return "&&";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_AtomicFE_8261019787198364231(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("featureDependencies.structure.OrFE");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode newNode = SConceptOperations.createNewNode("featureDependencies.structure.OrFE", null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), newNode);
          SLinkOperations.setTarget(newNode, "left", _context.getSourceNode(), true);
          return SLinkOperations.getTarget(newNode, "right", true);
        }

        public String getMatchingText(String pattern) {
          return "||";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }
}
