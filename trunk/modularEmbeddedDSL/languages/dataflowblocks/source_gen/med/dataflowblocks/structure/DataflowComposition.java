package med.dataflowblocks.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import med.core.structure.IModuleContent;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DataflowComposition extends BaseConcept implements IModuleContent {
  public static final String concept = "med.dataflowblocks.structure.DataflowComposition";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String BLOCKS = "blocks";

  public DataflowComposition(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(DataflowComposition.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DataflowComposition.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DataflowComposition.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DataflowComposition.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DataflowComposition.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DataflowComposition.VIRTUAL_PACKAGE, value);
  }

  public int getBlocksesCount() {
    return this.getChildCount(DataflowComposition.BLOCKS);
  }

  public Iterator<Block> blockses() {
    return this.children(Block.class, DataflowComposition.BLOCKS);
  }

  public List<Block> getBlockses() {
    return this.getChildren(Block.class, DataflowComposition.BLOCKS);
  }

  public void addBlocks(Block node) {
    this.addChild(DataflowComposition.BLOCKS, node);
  }

  public void insertBlocks(Block prev, Block node) {
    this.insertChild(prev, DataflowComposition.BLOCKS, node);
  }

  public static DataflowComposition newInstance(SModel sm, boolean init) {
    return (DataflowComposition)SModelUtil_new.instantiateConceptDeclaration("med.dataflowblocks.structure.DataflowComposition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DataflowComposition newInstance(SModel sm) {
    return DataflowComposition.newInstance(sm, false);
  }
}
