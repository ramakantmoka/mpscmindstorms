package med.dataflowblocks.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Block extends AbstractBlock implements INamedConcept {
  public static final String concept = "med.dataflowblocks.structure.Block";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PORTTYPE = "porttype";
  public static final String PORTS = "ports";

  public Block(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Block.NAME);
  }

  public void setName(String value) {
    this.setProperty(Block.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Block.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Block.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Block.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Block.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Block.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Block.VIRTUAL_PACKAGE, value);
  }

  public BlockType getPorttype() {
    return (BlockType) this.getReferent(BlockType.class, Block.PORTTYPE);
  }

  public void setPorttype(BlockType node) {
    super.setReferent(Block.PORTTYPE, node);
  }

  public int getPortsesCount() {
    return this.getChildCount(Block.PORTS);
  }

  public Iterator<Port> portses() {
    return this.children(Port.class, Block.PORTS);
  }

  public List<Port> getPortses() {
    return this.getChildren(Port.class, Block.PORTS);
  }

  public void addPorts(Port node) {
    this.addChild(Block.PORTS, node);
  }

  public void insertPorts(Port prev, Port node) {
    this.insertChild(prev, Block.PORTS, node);
  }

  public static Block newInstance(SModel sm, boolean init) {
    return (Block) SModelUtil_new.instantiateConceptDeclaration("med.dataflowblocks.structure.Block", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Block newInstance(SModel sm) {
    return Block.newInstance(sm, false);
  }
}
