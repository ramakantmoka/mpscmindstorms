package med.features.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DependencyProblem extends BaseConcept {
  public static final String concept = "med.features.structure.DependencyProblem";
  public static final String TARGET = "target";
  public static final String SOURCE = "source";
  public static final String SOURCE_EXPRESSION = "sourceExpression";
  public static final String TARGET_EXPRESSION = "targetExpression";
  public static final String INVALIDS = "invalids";

  public DependencyProblem(SNode node) {
    super(node);
  }

  public BaseConcept getTarget() {
    return (BaseConcept) this.getReferent(BaseConcept.class, DependencyProblem.TARGET);
  }

  public void setTarget(BaseConcept node) {
    super.setReferent(DependencyProblem.TARGET, node);
  }

  public BaseConcept getSource() {
    return (BaseConcept) this.getReferent(BaseConcept.class, DependencyProblem.SOURCE);
  }

  public void setSource(BaseConcept node) {
    super.setReferent(DependencyProblem.SOURCE, node);
  }

  public BaseFE getSourceExpression() {
    return (BaseFE) this.getChild(BaseFE.class, DependencyProblem.SOURCE_EXPRESSION);
  }

  public void setSourceExpression(BaseFE node) {
    super.setChild(DependencyProblem.SOURCE_EXPRESSION, node);
  }

  public BaseFE getTargetExpression() {
    return (BaseFE) this.getChild(BaseFE.class, DependencyProblem.TARGET_EXPRESSION);
  }

  public void setTargetExpression(BaseFE node) {
    super.setChild(DependencyProblem.TARGET_EXPRESSION, node);
  }

  public int getInvalidsesCount() {
    return this.getChildCount(DependencyProblem.INVALIDS);
  }

  public Iterator<InvalidConfig> invalidses() {
    return this.children(InvalidConfig.class, DependencyProblem.INVALIDS);
  }

  public List<InvalidConfig> getInvalidses() {
    return this.getChildren(InvalidConfig.class, DependencyProblem.INVALIDS);
  }

  public void addInvalids(InvalidConfig node) {
    this.addChild(DependencyProblem.INVALIDS, node);
  }

  public void insertInvalids(InvalidConfig prev, InvalidConfig node) {
    this.insertChild(prev, DependencyProblem.INVALIDS, node);
  }

  public static DependencyProblem newInstance(SModel sm, boolean init) {
    return (DependencyProblem) SModelUtil_new.instantiateConceptDeclaration("med.features.structure.DependencyProblem", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DependencyProblem newInstance(SModel sm) {
    return DependencyProblem.newInstance(sm, false);
  }
}
