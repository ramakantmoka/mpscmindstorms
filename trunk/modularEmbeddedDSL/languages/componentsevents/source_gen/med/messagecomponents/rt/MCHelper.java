package med.messagecomponents.rt;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class MCHelper {
  public MCHelper() {
  }

  public static Iterable<SNode> requiredMessagePorts(SNode component) {
    return ListSequence.fromList(SLinkOperations.getTargets(component, "ports", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "med.messagecomponents.structure.RequiredMessagePort");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "med.messagecomponents.structure.RequiredMessagePort");
      }
    });
  }

  public static Iterable<SNode> providedMessagePorts(SNode component) {
    return ListSequence.fromList(SLinkOperations.getTargets(component, "ports", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "med.messagecomponents.structure.ProvidedMessagePort");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "med.messagecomponents.structure.ProvidedMessagePort");
      }
    });
  }

  public static Iterable<SNode> incomingMessages(SNode component) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode rmp : Sequence.fromIterable(requiredMessagePorts(component))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(rmp, "msginterface", false), "messages", true)));
    }
    return res;
  }

  public static Iterable<SNode> outgoingMessages(SNode component) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode rmp : Sequence.fromIterable(providedMessagePorts(component))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(rmp, "msginterface", false), "messages", true)));
    }
    return res;
  }
}
