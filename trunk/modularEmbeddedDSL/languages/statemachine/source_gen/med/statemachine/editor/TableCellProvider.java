package med.statemachine.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;

public class TableCellProvider extends AbstractCellProvider {
  public TableCellProvider(SNode node) {
    super(node);
  }

  public EditorCell createEditorCell(final EditorContext context) {
    final List<SNode> states = SLinkOperations.getTargets(SNodeOperations.cast(this.getSNode(), "med.statemachine.structure.Statemachine"), "states", true);
    final int noOfCols = ListSequence.fromList(states).count() + 1;
    final List<SNode> events = SLinkOperations.getTargets(SNodeOperations.cast(this.getSNode(), "med.statemachine.structure.Statemachine"), "events", true);
    final int noOfRow = ListSequence.fromList(events).count() + 1;
    return new _FunctionTypes._return_P0_E0<EditorCell_Collection>() {
      public EditorCell_Collection invoke() {
        EditorCell_Collection result_v1wba8_a0a4a0 = EditorCell_Collection.createVertical(context, TableCellProvider.this.getSNode());
        boolean result_v1wba8_a0a0a4a0 = true;
        result_v1wba8_a0a4a0.setGridLayout(result_v1wba8_a0a0a4a0);
        for (final Wrappers._int row = new Wrappers._int(0); row.value < noOfRow; row.value++) {
          EditorCell_Collection result_v1wba8_a0a1a0a4a0 = EditorCell_Collection.createHorizontal(context, TableCellProvider.this.getSNode());
          for (int col = 0; col < noOfCols; col++) {
            if (row.value == 0) {
              if (col == 0) {
                EditorCell_Property result_v1wba8_a0a0a0a0a0a1a0a4a0 = EditorCell_Property.create(context, new TableCellProvider.NameAccessor(TableCellProvider.this.getSNode()), TableCellProvider.this.getSNode());
                result_v1wba8_a0a1a0a4a0.addEditorCell(result_v1wba8_a0a0a0a0a0a1a0a4a0);
              } else {
                // state header cells 
                EditorCell_Property result_v1wba8_a1a0a0a0a0a0b0a0e0a = EditorCell_Property.create(context, new TableCellProvider.NameAccessor(ListSequence.fromList(states).getElement(col - 1)), TableCellProvider.this.getSNode());
                result_v1wba8_a1a0a0a0a0a0b0a0e0a.getStyle().set(StyleAttributes.DRAW_BORDER, true);
                result_v1wba8_a1a0a0a0a0a0b0a0e0a.getStyle().set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
                result_v1wba8_a0a1a0a4a0.addEditorCell(result_v1wba8_a1a0a0a0a0a0b0a0e0a);
              }
            } else {
              if (col == 0) {
                //  event header cells 
                EditorCell_Property result_v1wba8_a1a0a0a0a0a0b0a0e0a_0 = EditorCell_Property.create(context, new TableCellProvider.NameAccessor(ListSequence.fromList(events).getElement(row.value - 1)), TableCellProvider.this.getSNode());
                result_v1wba8_a1a0a0a0a0a0b0a0e0a_0.getStyle().set(StyleAttributes.DRAW_BORDER, true);
                result_v1wba8_a1a0a0a0a0a0b0a0e0a_0.getStyle().set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
                result_v1wba8_a0a1a0a4a0.addEditorCell(result_v1wba8_a1a0a0a0a0a0b0a0e0a_0);
              } else {
                Iterable<SNode> transitions = ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(states).getElement(col - 1), "transitions", true)).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(it, "trigger", true), "med.statemachine.structure.EventTrigger"), "event", false) == ListSequence.fromList(events).getElement(row.value - 1);
                  }
                });
                EditorCell_Collection result_v1wba8_a1a0a0a0a0a0a1a0a4a0 = EditorCell_Collection.createVertical(context, TableCellProvider.this.getSNode());
                result_v1wba8_a1a0a0a0a0a0a1a0a4a0.putUserObject("state", ListSequence.fromList(states).getElement(col - 1));
                result_v1wba8_a1a0a0a0a0a0a1a0a4a0.putUserObject("event", ListSequence.fromList(events).getElement(row.value - 1));
                if (Sequence.fromIterable(transitions).isEmpty()) {
                  EditorCell_Label result_v1wba8_a0a2a1a0a0a0a0a0a1a0a4a0 = new EditorCell_Constant(context, TableCellProvider.this.getSNode(), "");
                  result_v1wba8_a1a0a0a0a0a0a1a0a4a0.addEditorCell(result_v1wba8_a0a2a1a0a0a0a0a0a1a0a4a0);
                } else {
                  for (SNode t : Sequence.fromIterable(transitions)) {
                    EditorCell_Collection result_v1wba8_a0a0a0c0b0a0a0a0a0a0b0a0e0a = EditorCell_Collection.createHorizontal(context, TableCellProvider.this.getSNode());
                    result_v1wba8_a0a0a0c0b0a0a0a0a0a0b0a0e0a.addEditorCell(TableCellProvider.this.getGuardCell(t, context));
                    result_v1wba8_a0a0a0c0b0a0a0a0a0a0b0a0e0a.addEditorCell(TableCellProvider.this.getTargetCell(t, context));
                    result_v1wba8_a1a0a0a0a0a0a1a0a4a0.addEditorCell(result_v1wba8_a0a0a0c0b0a0a0a0a0a0b0a0e0a);
                  }
                }
                result_v1wba8_a1a0a0a0a0a0a1a0a4a0.getStyle().set(StyleAttributes.DRAW_BORDER, true);
                result_v1wba8_a0a1a0a4a0.addEditorCell(result_v1wba8_a1a0a0a0a0a0a1a0a4a0);
              }
            }
          }
          result_v1wba8_a0a4a0.addEditorCell(result_v1wba8_a0a1a0a4a0);
        }
        return result_v1wba8_a0a4a0;
      }
    }.invoke();
  }

  public EditorCell getGuardCell(SNode transitionNode, EditorContext ctx) {
    CellProviderWithRole p = new RefNodeCellProvider(transitionNode, ctx);
    p.setRole("guard");
    p.setNoTargetText("<nothing>");
    EditorCell cell = p.createEditorCell(ctx);
    cell.setSubstituteInfo(p.createDefaultSubstituteInfo());
    return cell;
  }

  public EditorCell getTargetCell(SNode transitionNode, EditorContext ctx) {
    CellProviderWithRole p = new RefCellCellProvider(transitionNode, ctx);
    p.setRole("target");
    p.setNoTargetText("<no target>");
    p.setAuxiliaryCellProvider(new TableCellProvider.InlineProvider());
    EditorCell cell = p.createEditorCell(ctx);
    cell.setSubstituteInfo(p.createDefaultSubstituteInfo());
    return cell;
  }

  public static class NameAccessor implements ModelAccessor {
    private SNode node;

    public NameAccessor(SNode node) {
      this.node = node;
    }

    public String getText() {
      return this.node.getName();
    }

    public void setText(String n) {
      this.node.setName(n);
    }

    public boolean isValidText(String string) {
      return true;
    }
  }

  public static class InlineProvider extends InlineCellProvider {
    public InlineProvider() {
    }

    public EditorCell createEditorCell(EditorContext ctx) {
      return this.createEditorCell(ctx, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext ctx, SNode node) {
      CellProviderWithRole p = new PropertyCellProvider(node, ctx);
      p.setRole("name");
      p.setReadOnly(true);
      EditorCell cell = p.createEditorCell(ctx);
      cell.setSubstituteInfo(p.createDefaultSubstituteInfo());
      return cell;
    }
  }
}
