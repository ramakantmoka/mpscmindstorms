package med.statemachine.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import med.core.structure.StatementList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StateSwitchCase extends BaseConcept {
  public static final String concept = "med.statemachine.structure.StateSwitchCase";
  public static final String STATE = "state";
  public static final String BODY = "body";

  public StateSwitchCase(SNode node) {
    super(node);
  }

  public State getState() {
    return (State) this.getReferent(State.class, StateSwitchCase.STATE);
  }

  public void setState(State node) {
    super.setReferent(StateSwitchCase.STATE, node);
  }

  public StatementList getBody() {
    return (StatementList) this.getChild(StatementList.class, StateSwitchCase.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(StateSwitchCase.BODY, node);
  }

  public static StateSwitchCase newInstance(SModel sm, boolean init) {
    return (StateSwitchCase) SModelUtil_new.instantiateConceptDeclaration("med.statemachine.structure.StateSwitchCase", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StateSwitchCase newInstance(SModel sm) {
    return StateSwitchCase.newInstance(sm, false);
  }
}
