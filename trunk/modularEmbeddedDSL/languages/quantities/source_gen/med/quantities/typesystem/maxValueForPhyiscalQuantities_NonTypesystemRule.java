package med.quantities.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class maxValueForPhyiscalQuantities_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public maxValueForPhyiscalQuantities_NonTypesystemRule() {
  }

  public void applyRule(final SNode markAsPhysicalOperator, final TypeCheckingContext typeCheckingContext) {
    int min = SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(markAsPhysicalOperator, "type", true), "quantity", false), "minValue");
    int max = SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(markAsPhysicalOperator, "type", true), "quantity", false), "maxValue");
    if (SPropertyOperations.getInteger(markAsPhysicalOperator, "value") < min) {
      {
        BaseIntentionProvider intentionProvider = null;
        IErrorTarget errorTarget = new NodeErrorTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(markAsPhysicalOperator, "value cannot be smaller than " + min, "r:ae1999e2-f2a1-420d-a446-b43e895f34b9(med.quantities.typesystem)", "3456749490053321147", intentionProvider, errorTarget);
      }
    }
    if (SPropertyOperations.getInteger(markAsPhysicalOperator, "value") > max) {
      {
        BaseIntentionProvider intentionProvider = null;
        IErrorTarget errorTarget = new NodeErrorTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(markAsPhysicalOperator, "value cannot be greater than " + max, "r:ae1999e2-f2a1-420d-a446-b43e895f34b9(med.quantities.typesystem)", "3456749490053321213", intentionProvider, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "med.quantities.structure.MarkAsPhysicalOperator";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
