package med.quantities.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class supertypeof_AveragingType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public supertypeof_AveragingType_SubtypingRule() {
  }

  public SNode getSubOrSuperType(SNode averagingType, TypeCheckingContext typeCheckingContext) {
    SNode t = SConceptOperations.createNewNode("med.quantities.structure.GenericAveragingType", null);
    SLinkOperations.setTarget(t, "baseType", SNodeOperations.copyNode(SLinkOperations.getTarget(averagingType, "baseType", true)), true);
    return t;
  }

  public String getApplicableConceptFQName() {
    return "med.quantities.structure.AveragingType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return false;
  }
}
