package med.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LocalVariableReference extends Expression implements IVariableReference {
  public static final String concept = "med.core.structure.LocalVariableReference";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String VARIABLE = "variable";

  public LocalVariableReference(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(LocalVariableReference.NAME);
  }

  public void setName(String value) {
    this.setProperty(LocalVariableReference.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(LocalVariableReference.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(LocalVariableReference.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(LocalVariableReference.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(LocalVariableReference.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(LocalVariableReference.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(LocalVariableReference.VIRTUAL_PACKAGE, value);
  }

  public LocalVariableDeclaration getVariable() {
    return (LocalVariableDeclaration) this.getReferent(LocalVariableDeclaration.class, LocalVariableReference.VARIABLE);
  }

  public void setVariable(LocalVariableDeclaration node) {
    super.setReferent(LocalVariableReference.VARIABLE, node);
  }

  public static LocalVariableReference newInstance(SModel sm, boolean init) {
    return (LocalVariableReference) SModelUtil_new.instantiateConceptDeclaration("med.core.structure.LocalVariableReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LocalVariableReference newInstance(SModel sm) {
    return LocalVariableReference.newInstance(sm, false);
  }
}
