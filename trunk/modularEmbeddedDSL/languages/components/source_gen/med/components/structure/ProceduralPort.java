package med.components.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IHasIdentifierName;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ProceduralPort extends MedBase implements IHasIdentifierName {
  public static final String concept = "med.components.structure.ProceduralPort";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INTERFACE = "interface";

  public ProceduralPort(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(ProceduralPort.NAME);
  }

  public void setName(String value) {
    this.setProperty(ProceduralPort.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(ProceduralPort.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ProceduralPort.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ProceduralPort.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ProceduralPort.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ProceduralPort.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ProceduralPort.VIRTUAL_PACKAGE, value);
  }

  public Interface getInterface() {
    return (Interface)this.getReferent(Interface.class, ProceduralPort.INTERFACE);
  }

  public void setInterface(Interface node) {
    super.setReferent(ProceduralPort.INTERFACE, node);
  }

  public static ProceduralPort newInstance(SModel sm, boolean init) {
    return (ProceduralPort)SModelUtil_new.instantiateConceptDeclaration("med.components.structure.ProceduralPort", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ProceduralPort newInstance(SModel sm) {
    return ProceduralPort.newInstance(sm, false);
  }
}
