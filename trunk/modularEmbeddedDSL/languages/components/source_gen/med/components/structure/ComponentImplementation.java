package med.components.structure;

/*Generated by MPS */

import med.core.structure.MedBase;
import med.core.structure.IExportableModuleContent;
import med.core.structure.IHasIdentifierName;
import med.core.structure.IDocumentable;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ComponentImplementation extends MedBase implements IExportableModuleContent, IHasIdentifierName, IDocumentable {
  public static final String concept = "med.components.structure.ComponentImplementation";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String TEXT = "text";
  public static final String EXPORT = "export";
  public static final String COMPONENT_TYPE = "componentType";
  public static final String PROCEDURE_IMPLS = "procedureImpls";

  public ComponentImplementation(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ComponentImplementation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ComponentImplementation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ComponentImplementation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ComponentImplementation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ComponentImplementation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ComponentImplementation.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(ComponentImplementation.NAME);
  }

  public void setName(String value) {
    this.setProperty(ComponentImplementation.NAME, value);
  }

  public String getText() {
    return this.getProperty(ComponentImplementation.TEXT);
  }

  public void setText(String value) {
    this.setProperty(ComponentImplementation.TEXT, value);
  }

  public boolean getExport() {
    return this.getBooleanProperty(ComponentImplementation.EXPORT);
  }

  public void setExport(boolean value) {
    this.setBooleanProperty(ComponentImplementation.EXPORT, value);
  }

  public Component getComponentType() {
    return (Component)this.getReferent(Component.class, ComponentImplementation.COMPONENT_TYPE);
  }

  public void setComponentType(Component node) {
    super.setReferent(ComponentImplementation.COMPONENT_TYPE, node);
  }

  public int getProcedureImplsesCount() {
    return this.getChildCount(ComponentImplementation.PROCEDURE_IMPLS);
  }

  public Iterator<InterfaceProcedureImplementation> procedureImplses() {
    return this.children(InterfaceProcedureImplementation.class, ComponentImplementation.PROCEDURE_IMPLS);
  }

  public List<InterfaceProcedureImplementation> getProcedureImplses() {
    return this.getChildren(InterfaceProcedureImplementation.class, ComponentImplementation.PROCEDURE_IMPLS);
  }

  public void addProcedureImpls(InterfaceProcedureImplementation node) {
    this.addChild(ComponentImplementation.PROCEDURE_IMPLS, node);
  }

  public void insertProcedureImpls(InterfaceProcedureImplementation prev, InterfaceProcedureImplementation node) {
    this.insertChild(prev, ComponentImplementation.PROCEDURE_IMPLS, node);
  }

  public static ComponentImplementation newInstance(SModel sm, boolean init) {
    return (ComponentImplementation)SModelUtil_new.instantiateConceptDeclaration("med.components.structure.ComponentImplementation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ComponentImplementation newInstance(SModel sm) {
    return ComponentImplementation.newInstance(sm, false);
  }
}
