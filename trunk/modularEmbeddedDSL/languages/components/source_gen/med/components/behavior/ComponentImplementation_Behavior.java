package med.components.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class ComponentImplementation_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_updateProcedures_2739617086187249561(SNode thisNode, SNode component) {
    for (final SNode op : ListSequence.fromList(Component_Behavior.call_allProcedures_2739617086186422653(component))) {
      if (ListSequence.fromList(SLinkOperations.getTargets(thisNode, "procedureImpls", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "procedure", false) == op;
        }
      }).isEmpty()) {
        SNode impl = SConceptOperations.createNewNode("med.components.structure.InterfaceProcedureImplementation", null);
        SLinkOperations.setTarget(impl, "procedure", op, false);
        SLinkOperations.addChild(thisNode, "procedureImpls", impl);
      }
    }
  }

  public static SNode call_findMethodImplementation_3113923837077903669(SNode thisNode, final SNode p) {
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "procedureImpls", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "procedure", false) == p);
      }
    }).first();
  }
}
