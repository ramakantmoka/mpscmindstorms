package med.components.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.internal.collections.runtime.Sequence;
import med.core.behavior.System_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import med.components.behavior.Component_Behavior;
import med.components.behavior.Wiring_Behavior;
import jetbrains.mps.typesystem.inference.PropertyErrorTarget;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class systemAllInterfacesAreImplemented_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public systemAllInterfacesAreImplemented_NonTypesystemRule() {
  }

  public void applyRule(final SNode system, final TypeCheckingContext typeCheckingContext) {
    SNode w = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(system), "med.components.structure.Wiring")).first();
    if (w == null) {
      {
        BaseIntentionProvider intentionProvider = null;
        IErrorTarget errorTarget = new NodeErrorTarget();
        typeCheckingContext.reportTypeError(system, "no wiring specified", "r:a33671bf-8144-43f9-bd6e-c5adb345b856(med.components.typesystem)", "5224308508845870397", intentionProvider, errorTarget);
      }
      return;
    }
    for (SNode m : Sequence.fromIterable(System_Behavior.call_allImplementationModules_5224308508845870421(system))) {
      Iterable<SNode> impls = ListSequence.fromList(SLinkOperations.getTargets(m, "contents", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "med.components.structure.ComponentImplementation");
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SNodeOperations.cast(it, "med.components.structure.ComponentImplementation");
        }
      });
      for (SNode impl : Sequence.fromIterable(impls)) {
        SNode comp = SLinkOperations.getTarget(impl, "componentType", false);
        for (SNode i : Sequence.fromIterable(Component_Behavior.call_requiredInterfaces_5224308508845871101(comp))) {
          SNode mapping = Wiring_Behavior.call_getMappingFor_5224308508846312543(w, impl, i);
          if (mapping == null) {
            {
              BaseIntentionProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              errorTarget = new PropertyErrorTarget("name");
              typeCheckingContext.reportTypeError(system, "no interface mapping found for interface " + SPropertyOperations.getString(i, "name") + " for component implementation " + SPropertyOperations.getString(impl, "name"), "r:a33671bf-8144-43f9-bd6e-c5adb345b856(med.components.typesystem)", "5224308508845871318", intentionProvider, errorTarget);
            }
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "med.core.structure.System";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
