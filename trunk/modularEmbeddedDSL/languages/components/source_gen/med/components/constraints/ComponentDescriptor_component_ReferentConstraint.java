package med.components.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import med.core.behavior.ImplementationModule_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import med.components.behavior.Component_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class ComponentDescriptor_component_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public ComponentDescriptor_component_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("med.components.structure.ComponentDescriptor", "component", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("med.components.structure.ComponentDescriptor", "component");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    final SNode adaptor = SNodeOperations.getAncestor(_context.getEnclosingNode(), "med.components.structure.PortAdaptor", true, false);
    if ((adaptor != null)) {
      final SNode intf = SLinkOperations.getTarget(adaptor, "interface", false);
      return ListSequence.fromList(ImplementationModule_Behavior.call_visibleInstancesOfType_7301321101283468502(SNodeOperations.getAncestor(_context.getEnclosingNode(), "med.core.structure.ImplementationModule", true, false), SConceptOperations.findConceptDeclaration("med.components.structure.Component"))).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SNodeOperations.cast(it, "med.components.structure.Component");
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (Component_Behavior.call_portForInterface_2739617086196425897(it, intf) != null);
        }
      });
    } else {
      final SNode intf = SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(), "med.components.structure.InterfaceMapping", true, false), "interface", false);
      return ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(_context.getEnclosingNode()), "med.components.structure.Component")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (Component_Behavior.call_portForInterface_2739617086196425897(it, intf) != null);
        }
      });
    }
  }
}
