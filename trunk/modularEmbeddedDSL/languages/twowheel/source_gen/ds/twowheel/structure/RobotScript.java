package ds.twowheel.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import med.core.structure.IModuleContent;
import med.core.structure.IHasIdentifierName;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RobotScript extends BaseConcept implements IModuleContent, IHasIdentifierName {
  public static final String concept = "ds.twowheel.structure.RobotScript";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String STATEMENTS = "statements";

  public RobotScript(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(RobotScript.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(RobotScript.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(RobotScript.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(RobotScript.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(RobotScript.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(RobotScript.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(RobotScript.NAME);
  }

  public void setName(String value) {
    this.setProperty(RobotScript.NAME, value);
  }

  public int getStatementsesCount() {
    return this.getChildCount(RobotScript.STATEMENTS);
  }

  public Iterator<RSStatement> statementses() {
    return this.children(RSStatement.class, RobotScript.STATEMENTS);
  }

  public List<RSStatement> getStatementses() {
    return this.getChildren(RSStatement.class, RobotScript.STATEMENTS);
  }

  public void addStatements(RSStatement node) {
    this.addChild(RobotScript.STATEMENTS, node);
  }

  public void insertStatements(RSStatement prev, RSStatement node) {
    this.insertChild(prev, RobotScript.STATEMENTS, node);
  }

  public static RobotScript newInstance(SModel sm, boolean init) {
    return (RobotScript) SModelUtil_new.instantiateConceptDeclaration("ds.twowheel.structure.RobotScript", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RobotScript newInstance(SModel sm) {
    return RobotScript.newInstance(sm, false);
  }
}
