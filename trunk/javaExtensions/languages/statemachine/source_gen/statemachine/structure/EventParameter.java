package statemachine.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.baseLanguage.structure.IValidIdentifier;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EventParameter extends BaseConcept implements INamedConcept, IValidIdentifier {
  public static final String concept = "statemachine.structure.EventParameter";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TYPE = "type";

  public EventParameter(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(EventParameter.NAME);
  }

  public void setName(String value) {
    this.setProperty(EventParameter.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(EventParameter.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EventParameter.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EventParameter.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EventParameter.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EventParameter.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EventParameter.VIRTUAL_PACKAGE, value);
  }

  public Type getType() {
    return (Type)this.getChild(Type.class, EventParameter.TYPE);
  }

  public void setType(Type node) {
    super.setChild(EventParameter.TYPE, node);
  }

  public static EventParameter newInstance(SModel sm, boolean init) {
    return (EventParameter)SModelUtil_new.instantiateConceptDeclaration("statemachine.structure.EventParameter", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EventParameter newInstance(SModel sm) {
    return EventParameter.newInstance(sm, false);
  }
}
