package statemachine.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.smodel.SModelUtil_new;

public class methodCall_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public methodCall_NonTypesystemRule() {
  }

  public void applyRule(final SNode methodCallAction, final TypeCheckingContext typeCheckingContext) {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(methodCallAction, "call", true), "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
      {
        BaseIntentionProvider intentionProvider = null;
        IErrorTarget errorTarget = new NodeErrorTarget();
        typeCheckingContext.reportTypeError(methodCallAction, "Expression must be method call", "r:f6969c0a-d373-42b3-8422-53359952542e(statemachine.typesystem)", "7154428749571511283", intentionProvider, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "statemachine.structure.MethodCallAction";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
