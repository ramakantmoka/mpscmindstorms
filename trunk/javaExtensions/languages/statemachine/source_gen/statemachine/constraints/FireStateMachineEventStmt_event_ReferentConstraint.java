package statemachine.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class FireStateMachineEventStmt_event_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public FireStateMachineEventStmt_event_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("statemachine.structure.FireStateMachineEventStmt", "event", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("statemachine.structure.FireStateMachineEventStmt", "event");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    System.out.println("refNode" + _context.getReferenceNode());
    SNode stmt = SNodeOperations.getAncestor(_context.getReferenceNode(), "statemachine.structure.FireStateMachineEventStmt", true, false);

    System.out.println(stmt);
    System.out.println(SLinkOperations.getTarget(stmt, "target", true));
    System.out.println(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(stmt, "target", true)));
    SNode classifier = SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(stmt, "target", true)), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
    System.out.print(SPropertyOperations.getString(classifier, "name"));
    return SLinkOperations.getTargets(SNodeOperations.cast(classifier, "statemachine.structure.StatemachineClass"), "event", true);
  }
}
